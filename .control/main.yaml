title: >-
  Cloud-Based Software Engineering Automation Tool for Python Packages on GitHub
abstract: >-
  ${{ name }} (<i>IPA</i>: ${{ custom.project_name_ipa }})
  is a comprehensive <b>cloud-based automation tool</b> 
  facilitating the production of high-quality <b>Python packages</b> on <b>GitHub</b>.
  It is a ready-to-use software suite streamlining the initiation, configuration,
  management, development, publication, and maintenance of professional and scientific software projects
  in accordance with the latest software engineering best practices and methodologies,
  such as <b>Agile</b>, </b>Continuous software engineering</b>, and <b>DevOps</b>.
  PyPackIT is easily installable in both new and existing GitHub repositories,
  providing a dynamic and robust project infrastructure including
  a <b>build-ready Python package skeleton,/b>, 
  a <b>fully operational test suite</b>,
  a <b>complete documentation website</b>,
  and a <b>user-friendly control center</b> to manage the entire project. 
  Leveraging <b>GitHub Actions</b>, PyPackIT
  
  
  After installation, PyPackIT automatically activates in response to various repository events,
  executing appropriate tasks on the GitHub Actions cloud computing platform.
  It thus establishes an automated software development workflow tailored to research software needs,
  based on a well-tested pull-based model for collaborative research software engineering.
  It includes comprehensive Continuous software engineering pipelines that use the latest tools and technologies
  to provide an automated Agile software development process,
  enabling the experimental and highly iterative development of research software,
  while reducing variance, complexity, cost, and risk.
  PyPackIT's workflow automates the bulk of repetitive engineering and management activities
  throughout the software life-cycle, including:
  
  
  It allows users to solely focus on the scientific aspects of their projects by 
  taking charge of repetitive management tasks and enforcing engineering best practices 
  throughout the software development life-cycle.
  
  Using state-of-the-art tools and standards, 
  
  PyPackIT establishes a complete cloud development environment on GitHub, 
  integrating with its version control system, issue tracker, and pull-based model 
  to provide a fully automated software development workflow with issue management, branching model, 
  and version scheme. 
  
  Exploiting GitHub Actions, PyPackIT implements a cloud-native development process 
  using Agile, Continuous software engineering, and DevOps methodologies, streamlined for scientific 
  Python libraries with extensive Continuous Integration, Deployment, Testing, Refactoring, and 
  Maintenance pipelines. PyPackIT is an open-source software suite that seamlessly integrates with 
  both new and existing projects via a GitHub repository template at \url{https://github.com/repodynamics/pypackit}.
  
  
  It is a free and open-source software built on top of GitHub Actions,
  and offered as a GitHub repository template that can be readily utilized
  by new and existing projects.
  
  ${{ name }} provides a complete, professional, and robust infrastructure for your repository,
  Python package, test suite, and documentation website, according to the latest standards and best practices.
  It comes with an exhaustive set of fully-configured continuous integration, deployment, and testing (CI/CD/CT)
  workflows that render your GitHub repository and all its contents entirely dynamic.
  Managing your repository's settings, branches, labels, issues, and pull requests;
  dynamically generating and updating all necessary configuration files;
  linting, formatting, and testing your code on the cloud;
  versioning, building, and publishing your package on PyPI;
  creating GitHub releases with detailed release notes and changelogs;
  and generating and deploying a complete documentation website on GitHub Pages,
  are just a few examples of how ${{ name }} automates your entire software development process.
  
  By eliminating all the tedious, repetitive, and time-consuming steps of the development pipeline,
  ${{ name }} fuels innovation and growth in the Python ecosystem,
  by enabling aspiring and experienced developers alike to rapidly build professional software,
  readily share them with the world, and effortlessly maintain their projects.
  With ${{ name }}, you are free to solely focus on what truly matters:
  implementing your ideas and bringing your vision to life!

keywords:
  display:
    - Project Management
    - Software Development
    - DevOps
    - Continuous Integration
    - Continuous Deployment
    - Continuous Testing
    - Automation
    - Maintenance
    - GitHub Actions
    - Developer Experience
    - Deployment Manager
    - Release Automation
    - Repository Template
    - Dynamic Repository
    - Infrastructure as Code
    - Python
    - Packaging
    - Website
    - Bot
    - Config
highlights:
  - title: Control Center
    description: |
      A centralized user-interface to automatically control all project metadata and settings
      according to DevOps practices like Infrastructure-as-Code and Continuous Configuration Automation.
      It enables dynamic configuration management
      for the entire project infrastructure and development workflow,
      simplifying project setup, customization, and maintenance via
      automatic data templating, inheritance, and synchronization features
      that instantly apply modifications to all project components.
      Fully pre-configured according to latest guidelines and best practices,
      it requires most users to only fill project-specific metadata.
  - title: Python Package
    description: |
      A build-ready package skeleton with pre-configured source files and configuration files,
      automatically customized according to project metadata and settings.
      Users only need to add their code to the provided source files,
      while PyPackIT automates all packaging, versioning, licensing, distribution, and indexing tasks.
      To facilitate software findability and usage, each new release is published to PyPI, Zenodo, and GitHub,
      with a persistent DOI ensuring reliable citation.
  - title: Test Suite
    description: |
      A fully operational testing infrastructure enabling the immediate adoption of test-driven methodologies.
      Requiring users to only write test cases in the provided package,
      PyPackIT automatically performs unit, regression, end-to-end, and functional testing
      throughout the development life-cycle, ensuring software quality and correctness,
      while improving awareness of software health status via notifications and reports.
      The test suite is automatically packaged and distributed along each release,
      facilitating the reproducibility of test results
      for verification of software functionality and performance.
  - title: Documentation Website
    description: |
      An automated documentation website deployed online to GitHub Pages and Read The Docs platforms,
      leaving users with no documentation tasks other than writing issue tickets and docstrings.
      Fully designed and pre-filled with detailed developer and user manuals,
      the website is also automatically updated with project information, software API documentation,
      and comprehensive release notes and changelogs.
      Most website elements are dynamic and easily customizable via PyPackIT's control center,
      requiring no knowledge in web design.
  - title: Issue Management
    description: |
      The project's issue-tracking system is dynamically maintained,
      supplied with specialized issue submission forms to collect type-specific user inputs
      in a structured and machine-readable format.
      This allows PyPackIT to automate issue management activities
      such as ticket labeling and organization, bug triage, task assignment, 
      design documentation, and progress monitoring.
  - title: Version Control
    description: |
      To enable rapid project evolution while ensuring the reproducibility of earlier computational results,
      PyPackIT implements a specialized branching model and version scheme for simultaneous publication
      and support of multiple releases.
      Fully integrating with Git, PyPackIT's workflow automates version control tasks
      such as branching, tagging, merging, and commit management.
  - title: Continuous Integration & Deployment
    description: |
      PyPackIT's CI/CD pipelines automate tasks such as code style formatting, static code analysis,
      type checking, testing, build, and release, thus eliminating the need for dedicated integration
      and deployment teams, while increasing control, integrity, scalability, security,
      and transparency of the Agile development process.
  - title: Continuous Maintenance & Testing
    description: |
      To ensure the long-term sustainability of projects and maintain the health of research software
      and its development environment, PyPackIT periodically performs automated maintenance tasks,
      such as testing and refactoring code, updating dependencies and development tools,
      cleaning up the repository, and removing outdated development artifacts
      such as builds, logs, and reports.
  - title: Security
    description: |
      To enhance project security while supporting community collaboration,
      PyPackIT incorporates several security measures, such as branch/tag protection,
      security vulnerability scanning, dependency monitoring, and private security advisories.
      PyPackIT's GitHub Actions workflows and Actions are developed according to the latest security standards
      to prevent unauthorized access, data breaches, and code injection attacks.
      Moreover, to ensure that PyPackIT itself is highly secure,
      its entire infrastructure is natively implemented and self-contained.
  - title: Automated Workflows
    description: |
      ${{ name }} fully automates your entire software development process from start to finish,
      using a complete set of fully-configured GitHub Actions workflows,
      professionally designed and implemented according to the latest standards and best practices.
  - title: Dynamic Content
    description: |
      With the help of the provided control center and its templating capabilities,
      ${{ name }} allows you to make most parts of your repository's contents and interfaces dynamic.
  - title: Fully Configured
    description: |
      Not only does ${{ name }} come with well-thought-out default configurations for all
      its own options and settings, it also elevates your project by providing a complete set of
      configurations for your repository, Python package, test suite, documentation website,
      and all other tools and external services, according to the latest guidelines and best practices.
  - title: Highly Customizable
    description: |
      While carefully configured, ${{ name }} is also fully customizable,
      allowing you to tailor every aspect of your development pipeline to your specific needs.
  - title: Cloud Development
    description: |
      ${{ name }} is a cloud-based solution, that is fully integrated with GitHub,
      and utilizes GitHub Actions to automate your entire software development process.
  - title: Plug & Play
    description: |
      With ${{ name }} you are only a few clicks away from releasing your Python package
      on PyPI and GitHub, deploying a complete documentation website, and having a fully configured,
      professional, and dynamic repository up and running, where the only remaining steps in your
      software development process are adding your code, unit-tests and documentation content.

      ${{ name }}'s entire infrastructure is natively implemented, self-contained, and highly secure;
      with the exception of a handful of fundamental GitHub Actions and Python libraries from
      official sources such as the Python Packaging Authority and GitHub itself,
      ${{ name }} has no external dependencies, and does not rely on any third-party services.

  


team:
  aariam:
    github:
      user: aariam
  rlrios:
    github:
      user: raquellrios
  avolkamer:
    github:
      user: andreavolkamer
license:
  id: AGPL-3.0-or-later
copyright:
  notice: ${{ copyright.period }} ${{ team.owner.name.full }}
contact:
  email: info@repodynamics.com
maintain:
  pull:
    code_owners:
      # Default owners for everything, unless a later match takes precedence.
      - "*": [ aariam ]
  issue:
    app_bug: [ aariam ]
    app_request_enhancement: [ aariam ]
    app_request_feature: [ aariam ]
    app_request_breaking: [ aariam ]
  discussion:
    announcements: [ aariam ]
  security: aariam
  code_of_conduct: aariam
  support: aariam
citation:
  title: "${{ name }}: ${{ title }}"
  authors:
    - id: aariam
    - id: rlrios
    - id: avolkamer
  contacts:
    - avolkamer
    - aariam
  message: If you use ${{ name }}, please cite it using the metadata from this file.
  language: eng
theme:
  color:
    primary:
      light: '005500' # 135400
      dark: '1CAA00'  # 459B24
    secondary:
      light: '3C5500' # 055005
      dark: 'AF8A00'  # 9CCC00
  footer:
    type: pypackit
custom:
  project_name_ipa: "ˈpaɪˌpækɪt"
readme:
  github: &readme-config
    config:
      header:
        menu_bottom:
          buttons:
            - title: Overview
              description: ""
              path: 'intro/overview'
            - title: Install
              description: ""
              path: 'manual/install'
            - title: Releases
              description: ""
              path: 'news/category/releases'
            - title: Contact
              description: ""
              path: 'help/contact'

  pypi: *readme-config
  conda: *readme-config

  repo:
    health:
      contributing:
        type: manual
        path: .
        include_footer: true
        config: |
          <h1>Contributing Guidelines</h1>
          <p align="justify">
              Welcome to the <b>${{name}}</b> community!
              We are excited to have you here,
              and grateful that you are considering contributing.
              ${{name}} is a free and open-source project that evolves with the needs of its users,
              and can only survive and grow through the help of great members like you.
          </p>
          <blockquote>
              ❤️🙏 <b>We Appreciate All Your Work!</b><br>
              We follow the <a href="https://allcontributors.org/docs/en/specification">All Contributors</a>
              specifications; all types of contributions are encouraged and valued, and all contributors are
              acknowledged on our <a href="${{url.website.contributors}}">public website</a>
              and <a href="${{url.github.releases.home}}">repository</a>.
          </blockquote>
          <h2>How To Contribute</h2>
          <p align="justify">
              To keep all documentation on our project organized and easy to find, the complete
              <a href="${{url.website.contributing}}">contribution guide</a> is hosted on our website.
          </p>
      security:
        type: manual
        path: .
        include_footer: true
        config: |
          # ${{name}} Security and Vulnerability Disclosure Policy

          ${{name}} takes the security and privacy of all its users and members very seriously,
          and is committed to ensuring the safety of its products and services.
          In case a security vulnerability is detected that may affect users, we take immediate action to:
          1. fix the issue as soon as possible,
          2. publish a new security patch release in case a published application was affected,
          3. release a security advisory, detailing the vulnerability,
          as well as guidelines for end-users to protect themselves.
          Security advisories are accessible on our website and repository, as well as via a feed.


          ${{url.website.security_measures}}

          <blockquote>
              🛡️**Supported Versions**
              <br><br>
              Currently supported versions for security updates are:
          </blockquote>

          This policy is intended to give users, contributors, and security researchers clear guidelines for
          [reporting potential security vulnerabilities](#reporting-a-potential-vulnerability),
          and [conducting vulnerability discovery activities](#testing-for-vulnerabilities).
          It describes what systems and types of research are covered under this policy,
          how to send us vulnerability reports and what information to include,
          and how long we ask security researchers to wait before publicly disclosing vulnerabilities.

          <blockquote>
              🛡️**Supported Versions**
              <br><br>
              Questions regarding this policy may be sent to security@agency.gov.
              We also invite you to contact us with suggestions for improving this policy.
          </blockquote>


          ## Reporting a Potential Vulnerability
          If you have found a potential vulnerability in our application, website, or repository,
          please report it as soon as possible, following the guidelines described here.
          Please DO NOT

          ### Where to Report
          We use [GitHub's security advisories feature](https://docs.github.com/en/code-security/security-advisories/repository-security-advisories/about-repository-security-advisories)
          of our repository to securely discuss, fix and publish information about security vulnerabilities
          in ${{name}}. To privately report a security vulnerability,
          follow the [documentation on Github](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability)
          or [**click here to directly open a private report form**](${{url.github.security.new_advisory}}).

          <blockquote>
              🥷🏾 <b>Prefer Anonymity?</b>
              <br><br>
              Our vulnerability management team also welcomes anonymous emails sent to
              <a href="mailto:${{maintainer.email.security}}
          ?subject=
          %5BSecurity%20Vulnerability%20Report%5D%3A%20---Please%20provide%20a%20consc
          ise%20title%20here---
          &body=
          ---Thank%20you%20for%20reporting%20a%20security%20vulnerability.%20Please%20
          provide%20as%20much%20information%20as%20you%20can%20under%20the%20sections%
          20listed%20below.%20Texts%20like%20this%20that%20are%20surrounded%20by%20thr
          ee%20hyphens%20are%20instructions%20and%20should%20be%20deleted%20before%20s
          ending%20the%20email.---%20%0D%0A%0D%0A1.%20Summary%0D%0A---Provide%20a%20sh
          ort%20summary%20of%20the%20problem.%20Make%20the%20impact%20and%20severity%2
          0as%20clear%20as%20possible.%20For%20example%3A%20An%20unsafe%20deserializat
          ion%20vulnerability%20allows%20any%20unauthenticated%20user%20to%20execute%2
          0arbitrary%20code%20on%20the%20server.---%0D%0A%0D%0A2.%20Details%0D%0A---Gi
          ve%20all%20details%20on%20the%20vulnerability.%20Pointing%20to%20the%20incri
          minated%20source%20code%20is%20very%20helpful%20for%20the%20maintainer.---%0
          D%0A%0D%0A3.%20PoC%0D%0A---Complete%20instructions%2C%20including%20specific
          %20configuration%20details%2C%20to%20reproduce%20the%20vulnerability.---%0D%
          0A%0D%0A4.%20Impact%0D%0A---What%20kind%20of%20vulnerability%20is%20it%3F%20
          Who%20is%20impacted%3F---%0D%0A%0D%0A5.%20Affected%20Products%0D%0A---For%20
          each%20affected%20product%2C%20name%20the%20ecosystem%20%28e.g.%20pip%2C%20G
          itHub%20Actions%29%2C%20package-%20or%20filename%2C%20and%20affected%20versi
          ons.---%0D%0A%0D%0A6.%20Severity%0D%0A---Asses%20the%20severity%20of%20the%2
          0issue%2C%20e.g.%20using%20a%20CVSS%20vector%20string%20%28learn%20more%20at
          %20https%3A%2F%2Fwww.first.org%2Fcvss%2Fv3.1%2Fuser-guide%29.---%0D%0A%0D%0A
          7.%20Weaknesses%0D%0A---Provide%20Common%20Weakness%20Enumerator%20%28CWE%3B
          %20learn%20more%20at%20https%3A%2F%2Fdocs.github.com%2Fen%2Fcode-security%2F
          security-advisories%2Frepository-security-advisories%2Fabout-repository-secu
          rity-advisories%23cve-identification-numbers%29.---%0D%0A%0D%0A8.%20Mitigati
          on%0D%0A---Provide%20necessary%20steps%20to%20mitigate%20the%20problem.---%2
          ">${{maintainer.email.security}}</a>.
          </blockquote>

          ---Thank you for reporting a security vulnerability. Please provide as much information as you can under the sections listed below. Texts like this that are surrounded by three hyphens are instructions and should be deleted before sending the email.---

          1. Summary
          ---Provide a short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.---

          2. Details
          ---Give all details on the vulnerability. Pointing to the incriminated source code is very helpful for the maintainer.---

          3. PoC
          ---Complete instructions, including specific configuration details, to reproduce the vulnerability.---

          4. Impact
          ---What kind of vulnerability is it? Who is impacted?---

          5. Affected Products
          ---For each affected product, name the ecosystem (e.g. pip, GitHub Actions), package- or filename, and affected versions.---

          6. Severity
          ---Asses the severity of the issue, e.g. using a CVSS vector string (learn more at https://www.first.org/cvss/v3.1/user-guide).---

          7. Weaknesses
          ---Provide Common Weakness Enumerator (CWE; learn more at https://docs.github.com/en/code-security/security-advisories/repository-security-advisories/about-repository-security-advisories#cve-identification-numbers).---

          8. Mitigation
          ---Provide necessary steps to mitigate the problem.---


          ### What to Include
          In order to help us triage and prioritize submissions, we recommend that your reports:
          * Describe the location the vulnerability was discovered,
          affected components/versions, and the potential impact of exploitation.
          * Offer a detailed description of the vulnerability and the steps needed to reproduce it
          (proof of concept scripts or screenshots can be helpful).
          * if known, necessary steps to mitigate the issue.

          For more information, see GitHub Documentations on [creating a repository security advisory](https://docs.github.com/en/code-security/security-advisories/repository-security-advisories/creating-a-repository-security-advisory)
          and [best practices for writing repository security advisories](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/best-practices-for-writing-repository-security-advisories).

          ### Response Policy
          When you choose to share your contact information with us,
          we commit to coordinating with you as openly and as quickly as possible:
          * Within a week, our vulnerability management team will acknowledge receiving your report.
          * To the best of our ability, we will confirm the existence of the vulnerability to you
          and be as transparent as possible about what steps we are taking during the remediation process,
          including on issues or challenges that may delay resolution.
          * We will maintain an open dialogue to discuss issues.

          ### Disclosure Policy
          This project follows a 90-day disclosure timeline.
          If you are a security researcher and would like to disclose the vulnerability you detected,
          we request that you allow us at least 90 days prior to any public exposure.
          This helps the project contributors to resolve the vulnerability and issue a new release,
          and provides our users a chance to update their applications and protect themselves.



          ## Testing for Vulnerabilities
          ${{name}} is a free and open-source project.
          We encourage security researchers to help us improve our security measures
          by conducting vulnerability discovery activities on our application, website, and repository.
          Before starting, please read the [guidelines](#testing-for-vulnerabilities) below,
          describing what systems and types of research are covered under this policy.

          ### Authorization
          If you make a good faith effort to comply with this policy during your security research,
          we will consider your research to be authorized, will work with you to understand and resolve the issue quickly,
          and will not recommend or pursue legal action related to your research.
          Should legal action be initiated by a third party against you for activities that were conducted
          in accordance with this policy, we will make this authorization known.

          ### Guidelines
          Under this policy, "research" and "vulnerability discovery" means activities in which you:
          * notify us as soon as possible after you discover a real or potential security issue,
          * make every effort to avoid privacy violations, degradation of user experience,
          disruption to production systems, and destruction or manipulation of data,
          * only use exploits to the extent necessary to confirm a vulnerability's presence,
          * do not use an exploit to compromise or exfiltrate data, establish persistent command line access,
          or use the exploit to pivot to other systems,
          * provide us a reasonable amount of time to resolve the issue before you disclose it publicly,
          * do not submit a high volume of low-quality reports.

          Once you've established that a vulnerability exists or encounter
          any sensitive data (including personally identifiable information, financial information,
          or proprietary information or secrets of any kind), you must:
          * stop your test,
          * notify us immediately,
          * and not disclose this data to anyone else.

          ### Test Methods
          The following test methods are not authorized:
          * Network denial of service (DoS or DDoS) tests or other tests that
          impair access to or damage a system or data.
          * Social engineering (e.g. phishing, vishing), or any other non-technical vulnerability testing.

          ### Scope
          This policy applies to the following systems and services:
          * Source code at ${{url.github.home}}

          Any service not expressly listed above, such as any connected services, are excluded from scope
          and are not authorized for testing. Additionally, vulnerabilities found in systems from our vendors
          fall outside of this policy's scope and should be reported directly to the vendor according to their
          disclosure policy (if any). If you aren't sure whether a system is in scope or not,
          or there is a particular system not in scope that you think merits testing,
          please contact us at ${{maintainer.email.security}} to discuss it first, before starting your research.
    .github: |
      # GitHub Directory

    .github/DISCUSSION_TEMPLATE: |
      # Discussion Category Forms
      [Discussion category forms](https://docs.github.com/en/discussions/managing-discussions-for-your-community/creating-discussion-category-forms)
      customize the templates that are available for community members to use
      when they open new discussions in the repository.
      It encourages community members to include specific, structured information
      in their discussions by using customizable web form fields.

      To be recognized by GitHub, discussion category forms must be stored in the directory `/.github/DISCUSSION_TEMPLATE/`
      (i.e. this directory). Each YAML file defines a form for a specific discussion category, indicated by the
      filename, which must correspond with the slug for one of the discussion categories.
      For example, the template for the "New Announcements" category should be stored in `.github/DISCUSSION_TEMPLATE/new-announcements.yml`.
      Discussion forms, like issue forms, are written in YAML, using the
      GitHub [form schema](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema).

    .github/ISSUE_TEMPLATE: |
      # GitHub Issues Settings
      This directory contains templates and configurations used when an issue is opened in the repository.

      ## Templates
      The issues templates use the GitHub's [issue forms](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms)
      to create customizable web form fields. Each `.yml` file (other than `config.yml`) provides a template for
      a specific issue type. The issue forms use the YAML format, with a series of defined [top-level keys](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms#top-level-syntax)
      such as `name`, `description` and `labels`, and a [body syntax](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema)
      to define the form fields.

      Any YAML file created in this directory using the specified syntax will be automatically added to the list of possible
      issue forms that users can select from when opening a new issue in the repository.


      ## Configurations
      The [config.yml](../../.meta/config/issues_template_chooser.yaml) file contains the configurations for the
      [template chooser](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#configuring-the-template-chooser),
      i.e. the landing page of the repository's 'Issues' section.

      ### Options
      - `blank_issues_enabled`: A boolean value defining whether free-form issues can be opened by users.
      - `contact_links`: An array of dictionaries, defining additional external links for opening issues.
      These options will be displayed alongside the available templates in the 'Issues' section of the repository.

      ## References
      - [GitHub Documentation](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates)

    .github/PULL_REQUEST_TEMPLATE: |
      # GitHub Pull Requests Templates
      This directory contains additional templates for pull requests.

      By default, the template defined at [./github/pull_request_template.md](./github/pull_request_template.md)
      is used when opening a pull request. To use the extra templates in this directory,
      the `template` [query parameter](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/using-query-parameters-to-create-a-pull-request)
      must be added to the URL of the pull request form, defining the name of the template to use.
      For example, to use a template file named `my_custom_template.md`, add the following query string at the end of the
      URL: `?template=my_custom_template.md`. A full URL may e.g. look like this:
      https://github.com/my-username/my-repo/compare/main...my-branch?template=my_custom_template.md

      ## Notes
      - Pull request template filenames are not case-sensitive, and can have an extension such as `.md` or `.txt`.
      - The YAML syntax used for issue forms is not supported for pull requests templates.

      ## References
      - [GitHub Documentation](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository)

    #  .github/workflows: |
    #    # GitHub Actions Workflows
    #    This directory contains [workflows](https://docs.github.com/en/actions/using-workflows/about-workflows)
    #    used in the CI/CD operations of the repository.
    #
    #    ## [docs_rtd_pr_preview](_docs_rtd-pr-preview.yaml)
    #    https://docs.readthedocs.io/en/latest/pull-requests.html
    #    https://docs.readthedocs.io/en/latest/guides/pull-requests.html
    #
    #    ## Releases
    #    GitHub has [built-in functionality](https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes)
    #    to automatically generate release notes.
    #
    #    ## Used Actions
    #
    #    ### setup-python
    #    https://github.com/marketplace/actions/setup-python
    #
    #    ### setup-micromamba
    #    https://github.com/mamba-org/setup-micromamba
    #    replacing [provision-with-micromamba](https://github.com/mamba-org/provision-with-micromamba)
    #
    #    ## Syntax
    #
    #    ### on: schedule: cron
    #    schedule : https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
    #    cron tasks: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07
    #
    #    ## References
    #    - [GitHub Actions Documentation](https://docs.github.com/en/actions)
    #    - [Workflow Syntax](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions)
    #
    #    ## Useful Links
    #    - [Workflow security: `pull_request` vs `pull_request_target`](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)

    "${{ path.dir.control }}": |
      # Meta Directory
      This directory contains all the meta content of the repository.

      ## PyPI

      ### dependencies
      Either a list of dependencies, or a string representing the filepath (from root) to a txt file containing one
      dependency per line.

      ### optional_dependencies
      Either a dictionary, where keys are the name of the group of optional dependencies, and the values are lists of
      corresponding dependencies, or a string representing the path (from root) to a directory containing one
      txt file (named <group name>.txt) with one dependency per line, for each dependency group.

    "${{ path.dir.website }}": |
      # Documentation Website

      ## Requirements

      ### sphinxext-opengraph
      To add [Open Graph](https://ogp.me/) meta tags to each HTML page of the site.

      PyPI: https://pypi.org/project/sphinxext-opengraph
      conda-forge: https://anaconda.org/conda-forge/sphinxext-opengraph
      GitHub: https://github.com/wpilibsuite/sphinxext-opengraph
      Docs: https://sphinxext-opengraph.readthedocs.io/en/latest/

      ### Extra Requirements
      from 'apt': "librsvg2-bin"


web:
  analytics:
    plausible:
      domain: ""
      url: ""
    google_id: "G-0X66W6TGL2"
  base_url: https://pypackit.repodynamics.com

  readthedocs:
    # ReadTheDocs configuration file
    # ReadTheDocs uses this configuration to build the website on readthedocs.io.
    # Reference: https://docs.readthedocs.io/en/stable/config-file/v2.html
    name: templaterepo  # Slug name (not in readthedocs config file)
    platform: "community"
    # Required
    version: 2
    # Set the version of Python and other tools you might need
    build:
      os: ubuntu-22.04
      tools:
        python: "mambaforge-4.10"
      jobs:
        post_checkout:
          # versioningit needs the full git history to determine the package's version at build time.
          # see: https://github.com/readthedocs/readthedocs.org/issues/5989#issuecomment-853039401
          - git fetch --unshallow
    # Install dependencies
    conda:
      environment: docs/website/requirements.yaml
    # Install the package
    python:
      install:
        - method: pip
          path: .
    # Build documentation with Sphinx
    sphinx:
      configuration: docs/website/source/conf.py
      builder: dirhtml
      fail_on_warning: false
    # Build all additional formats of the documentation, i.e. pdf, epub, and htmlzip
    formats: all

  announcement_retention_days: 30

  navbar_icons:
    - name: PyPI Distribution
      icon: fa-brands fa-python
      url: ${{ url.pypi }}
    - name: Conda Distribution
      icon: _static/img/icon/conda.svg
      url: ${{ url.conda }}
      type: local
      attributes:
        class: nav-link fa-conda
    - name: Source Repository
      icon: fa-brands fa-github
      url: ${{ url.github.home }}
    - name: Issues
      icon: fa-regular fa-circle-dot
      url: ${{ url.github.issues.home }}
    - name: Pull Requests
      icon: fa-solid fa-code-pull-request
      url: ${{ url.github.pulls.home }}
    - name: Discussions
      icon: fa-solid fa-comments
      url: ${{ url.github.discussions.home }}
    - name: Email
      icon: fa-regular fa-envelope
      url: mailto:${{ maintainer.email.main }}
    - name: License
      icon: fa-solid fa-copyright
      url: ${{ url.website.license }}
  #    - name: Twitter
  #      icon: fa-brands fa-twitter
  #      url: ${{ owner.url.twitter }}
  #    - name: LinkedIn
  #      icon: fa-brands fa-linkedin
  #      url: ${{ owner.url.linkedin }}
  #    - name: ResearchGate
  #      icon: fa-brands fa-researchgate
  #      url: ${{ owner.url.researchgate }}
  #    - name: ORCiD
  #      icon: fa-brands fa-orcid
  #      url: ${{ owner.url.orcid }}

  quicklinks: subsections
  #  - - title: Outline
  #      path: 'intro/outline'
  #      include_in_readme: true
  #    - title: Background
  #      path: 'intro/background'
  #      include_in_readme: true
  #    - title: Overview
  #      path: 'intro/overview'
  #      include_in_readme: true
  #    - title: Basics
  #      path: 'intro/basics'
  #      include_in_readme: true
  #  - - title: Fundamentals
  #      path: 'manual/fundamentals'
  #      include_in_readme: true
  #    - title: Installation
  #      path: 'manual/install'
  #      include_in_readme: true
  #    - title: Control Center
  #      path: 'manual/control'
  #      include_in_readme: true
  #    - title: Usage
  #      path: 'manual/usage'
  #      include_in_readme: true
  #  - - title: Release Notes
  #      path: 'news/category/release'
  #      include_in_readme: true
  #  - - title: Q&A
  #      path: 'help/ask'
  #      include_in_readme: true



  path:
    news: 'news'
    contact: 'help/contact'
    contributors: 'about/#contributors'
    contributing: 'contribute'
    bug_report: 'contribute/feedback/report'
    license: 'license'
    security_measures: 'contribute/collaborate/maintain/security'
    sponsor: 'contribute/collaborate/maintain/sponsor'
