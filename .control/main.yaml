title: >-
  Cloud-Based Software Engineering Automation Tool for Python Packages on GitHub
abstract: >-
  ${{ name }} (<i>IPA</i>: ${{ custom.project_name_ipa }})
  is a comprehensive <b>cloud-based automation tool</b> 
  facilitating the production of high-quality <b>Python packages</b> on <b>GitHub</b>.
  It is a ready-to-use software suite streamlining the initiation, configuration,
  management, development, publication, and maintenance of professional and scientific software projects
  in accordance with the latest software engineering best practices and methodologies,
  such as <b>Agile</b>, </b>Continuous software engineering</b>, and <b>DevOps</b>.
  PyPackIT is easily installable in both new and existing GitHub repositories,
  providing a dynamic and robust project infrastructure including
  a <b>build-ready Python package skeleton,/b>, 
  a <b>fully operational test suite</b>,
  a <b>complete documentation website</b>,
  and a <b>user-friendly control center</b> to manage the entire project. 
  Leveraging <b>GitHub Actions</b>, PyPackIT
  
  
  After installation, PyPackIT automatically activates in response to various repository events,
  executing appropriate tasks on the GitHub Actions cloud computing platform.
  It thus establishes an automated software development workflow tailored to research software needs,
  based on a well-tested pull-based model for collaborative research software engineering.
  It includes comprehensive Continuous software engineering pipelines that use the latest tools and technologies
  to provide an automated Agile software development process,
  enabling the experimental and highly iterative development of research software,
  while reducing variance, complexity, cost, and risk.
  PyPackIT's workflow automates the bulk of repetitive engineering and management activities
  throughout the software life-cycle, including:
  
  
  It allows users to solely focus on the scientific aspects of their projects by 
  taking charge of repetitive management tasks and enforcing engineering best practices 
  throughout the software development life-cycle.
  
  Using state-of-the-art tools and standards, 
  
  PyPackIT establishes a complete cloud development environment on GitHub, 
  integrating with its version control system, issue tracker, and pull-based model 
  to provide a fully automated software development workflow with issue management, branching model, 
  and version scheme. 
  
  Exploiting GitHub Actions, PyPackIT implements a cloud-native development process 
  using Agile, Continuous software engineering, and DevOps methodologies, streamlined for scientific 
  Python libraries with extensive Continuous Integration, Deployment, Testing, Refactoring, and 
  Maintenance pipelines. PyPackIT is an open-source software suite that seamlessly integrates with 
  both new and existing projects via a GitHub repository template at \url{https://github.com/repodynamics/pypackit}.
  
  
  It is a free and open-source software built on top of GitHub Actions,
  and offered as a GitHub repository template that can be readily utilized
  by new and existing projects.
  
  ${{ name }} provides a complete, professional, and robust infrastructure for your repository,
  Python package, test suite, and documentation website, according to the latest standards and best practices.
  It comes with an exhaustive set of fully-configured continuous integration, deployment, and testing (CI/CD/CT)
  workflows that render your GitHub repository and all its contents entirely dynamic.
  Managing your repository's settings, branches, labels, issues, and pull requests;
  dynamically generating and updating all necessary configuration files;
  linting, formatting, and testing your code on the cloud;
  versioning, building, and publishing your package on PyPI;
  creating GitHub releases with detailed release notes and changelogs;
  and generating and deploying a complete documentation website on GitHub Pages,
  are just a few examples of how ${{ name }} automates your entire software development process.
  
  By eliminating all the tedious, repetitive, and time-consuming steps of the development pipeline,
  ${{ name }} fuels innovation and growth in the Python ecosystem,
  by enabling aspiring and experienced developers alike to rapidly build professional software,
  readily share them with the world, and effortlessly maintain their projects.
  With ${{ name }}, you are free to solely focus on what truly matters:
  implementing your ideas and bringing your vision to life!

keywords:
  display:
    - Project Management
    - Software Development
    - DevOps
    - Continuous Integration
    - Continuous Deployment
    - Continuous Testing
    - Automation
    - Maintenance
    - GitHub Actions
    - Developer Experience
    - Deployment Manager
    - Release Automation
    - Repository Template
    - Dynamic Repository
    - Infrastructure as Code
    - Python
    - Packaging
    - Website
    - Bot
    - Config
highlights:
  - title: Control Center
    description: |
      A centralized user-interface to automatically control all project metadata and settings
      according to DevOps practices like Infrastructure-as-Code and Continuous Configuration Automation.
      It enables dynamic configuration management
      for the entire project infrastructure and development workflow,
      simplifying project setup, customization, and maintenance via
      automatic data templating, inheritance, and synchronization features
      that instantly apply modifications to all project components.
      Fully pre-configured according to latest guidelines and best practices,
      it requires most users to only fill project-specific metadata.
  - title: Python Package
    description: |
      A build-ready package skeleton with pre-configured source files and configuration files,
      automatically customized according to project metadata and settings.
      Users only need to add their code to the provided source files,
      while PyPackIT automates all packaging, versioning, licensing, distribution, and indexing tasks.
      To facilitate software findability and usage, each new release is published to PyPI, Zenodo, and GitHub,
      with a persistent DOI ensuring reliable citation.
  - title: Test Suite
    description: |
      A fully operational testing infrastructure enabling the immediate adoption of test-driven methodologies.
      Requiring users to only write test cases in the provided package,
      PyPackIT automatically performs unit, regression, end-to-end, and functional testing
      throughout the development life-cycle, ensuring software quality and correctness,
      while improving awareness of software health status via notifications and reports.
      The test suite is automatically packaged and distributed along each release,
      facilitating the reproducibility of test results
      for verification of software functionality and performance.
  - title: Documentation Website
    description: |
      An automated documentation website deployed online to GitHub Pages and Read The Docs platforms,
      leaving users with no documentation tasks other than writing issue tickets and docstrings.
      Fully designed and pre-filled with detailed developer and user manuals,
      the website is also automatically updated with project information, software API documentation,
      and comprehensive release notes and changelogs.
      Most website elements are dynamic and easily customizable via PyPackIT's control center,
      requiring no knowledge in web design.
  - title: Issue Management
    description: |
      The project's issue-tracking system is dynamically maintained,
      supplied with specialized issue submission forms to collect type-specific user inputs
      in a structured and machine-readable format.
      This allows PyPackIT to automate issue management activities
      such as ticket labeling and organization, bug triage, task assignment, 
      design documentation, and progress monitoring.
  - title: Version Control
    description: |
      To enable rapid project evolution while ensuring the reproducibility of earlier computational results,
      PyPackIT implements a specialized branching model and version scheme for simultaneous publication
      and support of multiple releases.
      Fully integrating with Git, PyPackIT's workflow automates version control tasks
      such as branching, tagging, merging, and commit management.
  - title: Continuous Integration & Deployment
    description: |
      PyPackIT's CI/CD pipelines automate tasks such as code style formatting, static code analysis,
      type checking, testing, build, and release, thus eliminating the need for dedicated integration
      and deployment teams, while increasing control, integrity, scalability, security,
      and transparency of the Agile development process.
  - title: Continuous Maintenance & Testing
    description: |
      To ensure the long-term sustainability of projects and maintain the health of research software
      and its development environment, PyPackIT periodically performs automated maintenance tasks,
      such as testing and refactoring code, updating dependencies and development tools,
      cleaning up the repository, and removing outdated development artifacts
      such as builds, logs, and reports.
  - title: Security
    description: |
      To enhance project security while supporting community collaboration,
      PyPackIT incorporates several security measures, such as branch/tag protection,
      security vulnerability scanning, dependency monitoring, and private security advisories.
      PyPackIT's GitHub Actions workflows and Actions are developed according to the latest security standards
      to prevent unauthorized access, data breaches, and code injection attacks.
      Moreover, to ensure that PyPackIT itself is highly secure,
      its entire infrastructure is natively implemented and self-contained.
  - title: Automated Workflows
    description: |
      ${{ name }} fully automates your entire software development process from start to finish,
      using a complete set of fully-configured GitHub Actions workflows,
      professionally designed and implemented according to the latest standards and best practices.
  - title: Dynamic Content
    description: |
      With the help of the provided control center and its templating capabilities,
      ${{ name }} allows you to make most parts of your repository's contents and interfaces dynamic.
  - title: Fully Configured
    description: |
      Not only does ${{ name }} come with well-thought-out default configurations for all
      its own options and settings, it also elevates your project by providing a complete set of
      configurations for your repository, Python package, test suite, documentation website,
      and all other tools and external services, according to the latest guidelines and best practices.
  - title: Highly Customizable
    description: |
      While carefully configured, ${{ name }} is also fully customizable,
      allowing you to tailor every aspect of your development pipeline to your specific needs.
  - title: Cloud Development
    description: |
      ${{ name }} is a cloud-based solution, that is fully integrated with GitHub,
      and utilizes GitHub Actions to automate your entire software development process.
  - title: Plug & Play
    description: |
      With ${{ name }} you are only a few clicks away from releasing your Python package
      on PyPI and GitHub, deploying a complete documentation website, and having a fully configured,
      professional, and dynamic repository up and running, where the only remaining steps in your
      software development process are adding your code, unit-tests and documentation content.

      ${{ name }}'s entire infrastructure is natively implemented, self-contained, and highly secure;
      with the exception of a handful of fundamental GitHub Actions and Python libraries from
      official sources such as the Python Packaging Authority and GitHub itself,
      ${{ name }} has no external dependencies, and does not rely on any third-party services.

  


team:
  aariam:
    github:
      user: aariam
  rlrios:
    github:
      user: raquellrios
  avolkamer:
    github:
      user: andreavolkamer
license:
  id: AGPL-3.0-or-later
copyright:
  notice: ${{ copyright.period }} ${{ team.owner.name.full }}
contact:
  email: info@repodynamics.com
maintain:
  pull:
    code_owners:
      # Default owners for everything, unless a later match takes precedence.
      - "*": [ aariam ]
  issue:
    app_bug: [ aariam ]
    app_request_enhancement: [ aariam ]
    app_request_feature: [ aariam ]
    app_request_breaking: [ aariam ]
  discussion:
    announcements: [ aariam ]
  security: aariam
  code_of_conduct: aariam
  support: aariam
citation:
  title: "${{ name }}: ${{ title }}"
  authors:
    - id: aariam
    - id: rlrios
    - id: avolkamer
  contacts:
    - avolkamer
    - aariam
  message: If you use ${{ name }}, please cite it using the metadata from this file.
  language: eng
custom:
  project_name_ipa: "ˈpaɪˌpækɪt"

