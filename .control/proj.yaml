title: Cloud-Based Continuous Software Engineering Automation for Python Packages on GitHub
  # Alternative Titles
  # - A fully automated, plug and play, professional software project management solution for Python packages on GitHub
  # - GitHub-Based Automation Tool For Research Software Engineering in Python
  # - Cloud-Based Automation for Research Software on GitHub
  # - Cloud-Based Automation For Scientific Python Libraries on GitHub
  # - A ready-to-use automation tool for research software development in Python on GitHub
  # - A cloud-based automation tool for scientific Python libraries on GitHub
  # - A fully automated tool for better research software development
  # - Solving (Tackling) the research software crisis with automation (on GitHub)
  # - Automated research software development with Python packages on GitHub
  # - A fully automated scientific software project management solution/system for Python packages on GitHub
  # - Better Research Software in Python with Automation on GitHub
  # - Toward Better Research Software with Python Packages and Automation on GitHub
abstract: >-
  
  As Computational Science and Engineering gains momentum, 
  research quality increasingly depends on scientific software. 
  Often faced with funding, time, staffing, and technical constraints, 
  research software development can greatly benefit from automation solutions 
  that improve quality and lower production costs. 
  The recent integration of cloud computing frameworks into social coding platforms 
  offers new opportunities to streamline research software engineering 
  well beyond the capabilities of existing options. 
  In response, we present PyPackIT—a comprehensive cloud-based automation tool 
  for the production of Findable, Accessible, Interoperable, and Reusable research software, 
  in accordance with Open Science and FAIR Principles. 
  PyPackIT is a ready-to-use software enabling scientists 
  to effortlessly create, develop, publish, and maintain high-quality software libraries in Python, 
  the leading programming language for scientific applications. 
  It allows users to solely focus on the scientific aspects of their projects 
  by taking charge of repetitive management tasks and enforcing engineering best practices 
  throughout the software development life-cycle. 
  Using latest tools and standards, PyPackIT offers a robust project infrastructure, 
  including a build-ready Python package skeleton, 
  a fully operational test suite, a complete documentation website, 
  and a user-friendly control center inspired by Infrastructure-as-Code 
  and Continuous Configuration Automation practices 
  to enable dynamic project management and customization. 
  PyPackIT establishes a complete cloud development environment on GitHub, 
  integrating with its version control system, issue tracker, 
  and pull-based model to provide a fully automated software development workflow 
  with issue management, branching model, and version scheme. 
  Exploiting GitHub Actions, PyPackIT implements a cloud-native development process 
  using Agile, Continuous software engineering, and DevOps methodologies, 
  streamlined for scientific Python libraries with extensive 
  Continuous Integration, Deployment, Testing, Refactoring, and Maintenance pipelines. 
  PyPackIT is an open-source software suite that seamlessly integrates with 
  both new and existing projects via a GitHub repository template at 
  \url{https://github.com/repodynamics/pypackit}.
  
  
  ${{ name }} (<i>IPA</i>: ${{ custom.project_name_ipa }})
  is a comprehensive <b>cloud-based automation tool</b> 
  facilitating the production of high-quality <b>Python packages</b> on <b>GitHub</b>.
  It is a ready-to-use software suite streamlining the initiation, configuration,
  management, development, publication, and maintenance of professional and scientific software projects
  in accordance with the latest software engineering best practices and methodologies,
  such as <b>Agile</b>, </b>Continuous software engineering</b>, and <b>DevOps</b>.
  PyPackIT is easily installable in both new and existing GitHub repositories,
  providing a dynamic and robust project infrastructure including
  a <b>build-ready Python package skeleton,/b>, 
  a <b>fully operational test suite</b>,
  a <b>complete documentation website</b>,
  and a <b>user-friendly control center</b> to manage the entire project. 
  Leveraging <b>GitHub Actions</b>, PyPackIT
  
  
  ${{ name }} (<i>IPA</i>: ˈpaɪˌpækɪt) is a fully automated, plug and play,
  professional software project management solution,
  <b>empowering the development of Python packages on GitHub</b>.
  It is a free and open-source software built on top of GitHub Actions,
  and offered as a GitHub repository template that can be readily utilized
  by new and existing projects.
  ${{ name }} provides a complete, professional, and robust infrastructure for your repository,
  Python package, test suite, and documentation website, according to the latest standards and best practices.
  It comes with an exhaustive set of fully-configured continuous integration, deployment, and testing (CI/CD/CT)
  workflows that render your GitHub repository and all its contents entirely dynamic.
  Managing your repository's settings, branches, labels, issues, and pull requests;
  dynamically generating and updating all necessary configuration files;
  linting, formatting, and testing your code on the cloud;
  versioning, building, and publishing your package on PyPI;
  creating GitHub releases with detailed release notes and changelogs;
  and generating and deploying a complete documentation website on GitHub Pages,
  are just a few examples of how ${{ name }} automates your entire software development process.
  By eliminating all the tedious, repetitive, and time-consuming steps of the development pipeline,
  ${{ name }} fuels innovation and growth in the Python ecosystem,
  by enabling aspiring and experienced developers alike to rapidly build professional software,
  readily share them with the world, and effortlessly maintain their projects.
  With ${{ name }}, you are free to solely focus on what truly matters:
  implementing your ideas and bringing your vision to life!
  
  
  After installation, PyPackIT automatically activates in response to various repository events,
  executing appropriate tasks on the GitHub Actions cloud computing platform.
  It thus establishes an automated software development workflow tailored to research software needs,
  based on a well-tested pull-based model for collaborative research software engineering.
  It includes comprehensive Continuous software engineering pipelines that use the latest tools and technologies
  to provide an automated Agile software development process,
  enabling the experimental and highly iterative development of research software,
  while reducing variance, complexity, cost, and risk.
  PyPackIT's workflow automates the bulk of repetitive engineering and management activities
  throughout the software life-cycle, including:
  
  
  It allows users to solely focus on the scientific aspects of their projects by 
  taking charge of repetitive management tasks and enforcing engineering best practices 
  throughout the software development life-cycle.
  
  Using state-of-the-art tools and standards, 
  
  PyPackIT establishes a complete cloud development environment on GitHub, 
  integrating with its version control system, issue tracker, and pull-based model 
  to provide a fully automated software development workflow with issue management, branching model, 
  and version scheme. 
  
  Exploiting GitHub Actions, PyPackIT implements a cloud-native development process 
  using Agile, Continuous software engineering, and DevOps methodologies, streamlined for scientific 
  Python libraries with extensive Continuous Integration, Deployment, Testing, Refactoring, and 
  Maintenance pipelines. PyPackIT is an open-source software suite that seamlessly integrates with 
  both new and existing projects via a GitHub repository template at \url{https://github.com/repodynamics/pypackit}.
  
  
  It is a free and open-source software built on top of GitHub Actions,
  and offered as a GitHub repository template that can be readily utilized
  by new and existing projects.
  
  ${{ name }} provides a complete, professional, and robust infrastructure for your repository,
  Python package, test suite, and documentation website, according to the latest standards and best practices.
  It comes with an exhaustive set of fully-configured continuous integration, deployment, and testing (CI/CD/CT)
  workflows that render your GitHub repository and all its contents entirely dynamic.
  Managing your repository's settings, branches, labels, issues, and pull requests;
  dynamically generating and updating all necessary configuration files;
  linting, formatting, and testing your code on the cloud;
  versioning, building, and publishing your package on PyPI;
  creating GitHub releases with detailed release notes and changelogs;
  and generating and deploying a complete documentation website on GitHub Pages,
  are just a few examples of how ${{ name }} automates your entire software development process.
  
  By eliminating all the tedious, repetitive, and time-consuming steps of the development pipeline,
  ${{ name }} fuels innovation and growth in the Python ecosystem,
  by enabling aspiring and experienced developers alike to rapidly build professional software,
  readily share them with the world, and effortlessly maintain their projects.
  With ${{ name }}, you are free to solely focus on what truly matters:
  implementing your ideas and bringing your vision to life!

keywords:
  - Project Management
  - Software Development
  - DevOps
  - Continuous Integration
  - Continuous Deployment
  - Continuous Testing
  - Automation
  - Maintenance
  - GitHub Actions
  - Developer Experience
  - Deployment Manager
  - Release Automation
  - Repository Template
  - Dynamic Repository
  - Infrastructure as Code
  - Python
  - Packaging
  - Website
  - Bot
  - Config
  # Automatic software project management; Cloud-native software development workflow; Continuous software engineering pipeline; GitHub Actions automation tool; Research software project template; FAIR scientific Python library
highlights:
  - title: Control Center
    description: |
      A centralized user-interface to automatically control all project metadata and settings
      according to DevOps practices like Infrastructure-as-Code and Continuous Configuration Automation.
      It enables dynamic configuration management
      for the entire project infrastructure and development workflow,
      simplifying project setup, customization, and maintenance via
      automatic data templating, inheritance, and synchronization features
      that instantly apply modifications to all project components.
      Fully pre-configured according to latest guidelines and best practices,
      it requires most users to only fill project-specific metadata.
      
      ${{ name }} provides a centralized control center for your repository,
      where all available settings for ${{ name }} are gathered in one place
      along with all information, configurations, and metadata of your project,
      and thoughtfully organized and presented in a clear, consistent, and concise format,
      mainly through the use of YAML files.
      Whenever you commit changes to the control center files, they are automatically
      applied to your repository, Python package,
      test suite, documentation website, and all other tools and external services.
      Therefore, instead of having to deal with multiple interfaces and diverse configuration
      and metadata files scattered across your repository and each with its own format and syntax,
      you can simply manage your entire project from within the control center,
      using a single, unified, and consistent interface;
      ${{ name }} automatically translates your changes into the appropriate formats,
      generates all necessary files in the required locations, and updates them dynamically.

      The control center contains all key information and metadata of your project,
      such as its name, description, keywords, license and copyright information,
      authors/maintainers and their roles, contact information, citations,
      and branding and styling information, to name a few.
      On top of these, ${{ name }} automatically augments your project's metadata
      with various dynamic information, so that you don't have to manually define and update them.
      For example, all information on your GitHub repository, along with full details of
      the project's owner, authors, maintainers, and contributors, are periodically retrieved
      from GitHub, and a full list of your package's active releases and their corresponding
      information are generated and maintained automatically.

      Furthermore, the control center contains all configurations and metadata for your
      GitHub/Git repository (e.g. general settings; branch protection rules; security configurations;
      GitHub Pages settings; templates for issues, pull requests, and discussions; funding options;
      health files contents; README files contents; description and topics; gitignore and gitattributes files),
      Python package and test suite (e.g. build configurations; package metadata; dependencies
      and other requirements; entry points and scripts declarations; manifest file content;
      docstrings; PyPI and Conda settings),
      documentation website (e.g. menu, navigation bar, and quicklinks items; theme and styling settings;
      custom domain declaration; web analytics settings, announcement configurations),
      and all other tools and external services that are utilized by your project
      (e.g. settings for various linting, formatting, and testing tools such as
      Ruff, Mypy, Pylint, Bandit, Isort, Black, Pytest, Pytest-cov, etc.;
      pre-commit hooks configurations; settings for external platforms such as Codecov and ReadTheDocs).

      In addition, to eliminate any redundancy and provide your project with a high degree of flexibility
      and customization, ${{ name }} allows for complex and recursive templating within all contents of
      the control center, meaning that you can reference and reuse any piece of configuration or data
      in all other parts of the control center.
      You can also command ${{ name }} to dynamically inherit any piece of configuration or data
      from any other GitHub repository, allowing you to easily share and reuse specifications
      across multiple projects.

      
      

  - title: Python Package
    description: |
      A build-ready package skeleton with pre-configured source files and configuration files,
      automatically customized according to project metadata and settings.
      Users only need to add their code to the provided source files,
      while PyPackIT automates all packaging, versioning, licensing, distribution, and indexing tasks.
      To facilitate software findability and usage, each new release is published to PyPI, Zenodo, and GitHub,
      with a persistent DOI ensuring reliable citation.
  - title: Test Suite
    description: |
      A fully operational testing infrastructure enabling the immediate adoption of test-driven methodologies.
      Requiring users to only write test cases in the provided package,
      PyPackIT automatically performs unit, regression, end-to-end, and functional testing
      throughout the development life-cycle, ensuring software quality and correctness,
      while improving awareness of software health status via notifications and reports.
      The test suite is automatically packaged and distributed along each release,
      facilitating the reproducibility of test results
      for verification of software functionality and performance.
  - title: Documentation Website
    description: |
      An automated documentation website deployed online to GitHub Pages and Read The Docs platforms,
      leaving users with no documentation tasks other than writing issue tickets and docstrings.
      Fully designed and pre-filled with detailed developer and user manuals,
      the website is also automatically updated with project information, software API documentation,
      and comprehensive release notes and changelogs.
      Most website elements are dynamic and easily customizable via PyPackIT's control center,
      requiring no knowledge in web design.
      
      ${{ name }} comes with a professional website for your project, that is easily
      customizable, and automatically generated and deployed on your preferred platform.
  

  - title: Issue Management
    description: |
      The project's issue-tracking system is dynamically maintained,
      supplied with specialized issue submission forms to collect type-specific user inputs
      in a structured and machine-readable format.
      This allows PyPackIT to automate issue management activities
      such as ticket labeling and organization, bug triage, task assignment, 
      design documentation, and progress monitoring.
  - title: Version Control
    description: |
      To enable rapid project evolution while ensuring the reproducibility of earlier computational results,
      PyPackIT implements a specialized branching model and version scheme for simultaneous publication
      and support of multiple releases.
      Fully integrating with Git, PyPackIT's workflow automates version control tasks
      such as branching, tagging, merging, and commit management.
  - title: Continuous Integration & Deployment
    description: |
      PyPackIT's CI/CD pipelines automate tasks such as code style formatting, static code analysis,
      type checking, testing, build, and release, thus eliminating the need for dedicated integration
      and deployment teams, while increasing control, integrity, scalability, security,
      and transparency of the Agile development process.
  - title: Continuous Maintenance & Testing
    description: |
      To ensure the long-term sustainability of projects and maintain the health of research software
      and its development environment, PyPackIT periodically performs automated maintenance tasks,
      such as testing and refactoring code, updating dependencies and development tools,
      cleaning up the repository, and removing outdated development artifacts
      such as builds, logs, and reports.

  - title: Security  # Self-Contained & Secure
    description: |
      To enhance project security while supporting community collaboration,
      PyPackIT incorporates several security measures, such as branch/tag protection,
      security vulnerability scanning, dependency monitoring, and private security advisories.
      PyPackIT's GitHub Actions workflows and Actions are developed according to the latest security standards
      to prevent unauthorized access, data breaches, and code injection attacks.
      Moreover, to ensure that PyPackIT itself is highly secure,
      its entire infrastructure is natively implemented and self-contained.
      
      ${{ name }}'s entire infrastructure is natively implemented, self-contained, and highly secure;
      with the exception of a handful of fundamental GitHub Actions and Python libraries from
      official sources such as the Python Packaging Authority and GitHub itself,
      ${{ name }} has no external dependencies, and does not rely on any third-party services.
      Instead, all key features and functionalities of ${{ name }} are implemented natively,
      in a series of open-source GitHub Actions and Python libraries developed and maintained
      by the ${{ name }} team.
      This makes ${{ name }} highly secure, robust, error-proof, and reliable,
      and gives the ${{ name }} team full control over the entire software stack,
      allowing us to rapidly respond to any issues or bugs that may arise,
      and to continuously improve and enhance the platform.
      It also ensures that the entire infrastructure of ${{ name }} is fully transparent,
      and easily auditable by the community.

  - title: Automated Workflows
    description: |
      ${{ name }} fully automates your entire software development process from start to finish,
      using a complete set of fully-configured GitHub Actions workflows,
      professionally designed and implemented according to the latest standards and best practices.
      
      ${{ name }} fully automates your entire software development process from start to finish,
      using a complete set of fully-configured GitHub Actions workflows,
      professionally designed and implemented according to the latest standards and best practices.

      The following is a simplified example of one of ${{ name }}'s main workflows:

      Every time a new issue is opened in your repository, ${{ name }} automatically
      processes the issue and reformats the text into a pre-defined style,
      to ensure consistency and readability across all issues in your repository.
      It also adds a comment to the issue, which tracks its status,
      and is automatically updated whenever there is a progress.
      Moreover, based on the contents of the issue, it is automatically assigned to a defined maintainer,
      and tagged with various labels that indicate the type and status of the issue,
      along with its target branches and package versions.
      The assigned maintainer can then triage the issue and change its status label accordingly.

      For example, if the issue is labeled as accepted,
      ${{ name }} automatically creates a new development branch from each of the issue's target branches,
      and transforms the issue into draft pull requests for each of the development branches.
      Subsequently, every time changes are applied to one of the development branches,
      ${{ name }} automatically detects the type of changes, and runs the appropriate linting,
      formatting, and testing workflows, applying the necessary fixes and updates to the branch,
      while generating comprehensive reports that can be easily tracked through the draft pull request.
      Furthermore, depending on the type of changes,
      ${{ name }} automatically publishes developmental versions of your package on TestPyPI,
      and generates previews of your documentation website throughout the development process.

      Finally, when a development branch is marked as complete, ${{ name }} automatically
      removes the draft status from the corresponding pull request,
      adds a summary of all applied changes, and requests reviews from the assigned maintainers.
      Once the pull request is approved, the reviewers can label the pull request as final,
      or as a pre-release (alpha, beta, or release candidate)
      in case of pull requests that correspond to a new package version.
      For example, if the pull request is for a new package version and is labeled as final,
      ${{ name }} automatically merges the pull request into the corresponding release branch,
      updates all relevant changelogs, calculates the new version and adds a version tag to the release branch,
      builds the package and publishes it on PyPI, creates a new release on GitHub,
      and generates a new version of the documentation website and deploys it on GitHub Pages,
      with added release notes and an announcement of the new release.

      

  - title: Dynamic Content
    description: |
      With the help of the provided control center and its templating capabilities,
      ${{ name }} allows you to make most parts of your repository's contents and interfaces dynamic.
      
      With the help of the provided control center and its templating capabilities,
      ${{ name }} allows you to make most parts of your repository's contents and interfaces dynamic.
      In addition to all the configuration and metadata files described above,
      the following are a few examples of how this feature is further utilized:

      Issue and discussion forms of your repository (defined in the control center) are completely dynamic.
      For example, they contain dropdown menus for the user to select the package version, Python version,
      operating system, and other specifications relevant to the issue.
      Instead of hard coding these specifications in the forms, which would require you to manually
      update them every time there is a change (e.g. when a new package version is released, or when support
      for a specific Python version or operating system is added or removed),
      ${{ name }} uses its templating mechanism to dynamically reference the corresponding specifications.
      Since these are automatically updated whenever there is a change, this ensures that the forms
      are always up to date, without the need for any manual intervention on your part.

      Similarly, changelogs and release notes, which are automatically generated and updated according
      to the templates defined in the control center, also use a variety of dynamic references,
      such as package version, release date, commit hash, link to the corresponding pull request,
      dependency and requirement changes, list of contributors, and of course, the details of applied changes.
      These are all dynamically obtained from various contexts, so that complete changelog entries and
      release notes can be automatically generated and added to your repository and website
      upon merging a pull request into a release branch.

      Furthermore, all community health files (e.g. contribution guidelines, code of conduct,
      support guidelines, security policy, etc.), license files, and directory README files are also
      dynamically generated and updated according to the templates defined in the control center.
      They include dynamic references to various information defined in your control center,
      such as the name of the project, owner and copyright information, contact information,
      list of maintainers, links to additional information on your website, and so on.
      Therefore, instead of requiring you to manually scan multiple files and update
      the corresponding information whenever there is a change,
      ${{ name }} automatically updates all relevant files whenever any of the referenced information changes.

      In addition, the entire content defined in your control center is also made available
      to your documentation website, allowing you to dynamically reference any piece of information,
      configuration, or metadata of your project in your website's content.
      This allows you to easily maintain a consistent and unified presentation of your project
      across all interfaces and platforms, while eliminating any redundancy and manual intervention.


  - title: Fully Configured
    description: |
      Not only does ${{ name }} come with well-thought-out default configurations for all
      its own options and settings, it also elevates your project by providing a complete set of
      configurations for your repository, Python package, test suite, documentation website,
      and all other tools and external services, according to the latest guidelines and best practices.
      
      Not only does ${{ name }} come with well-thought-out default configurations for all
      its own options and settings, it also elevates your project by providing a complete set of
      configurations for your repository, Python package, test suite, documentation website,
      and all other tools and external services, according to the latest guidelines and best practices.
      These are automatically applied to your new or existing project when you first start using ${{ name }},
      and are updated dynamically whenever you make changes to the corresponding settings in the control center.

  - title: Highly Customizable
    description: |
      While carefully configured, ${{ name }} is also fully customizable,
      allowing you to tailor every aspect of your development pipeline to your specific needs.
      
      While carefully configured, ${{ name }} is also fully customizable,
      allowing you to tailor every aspect of your development pipeline to your specific needs.

      ${{ name }} also allows you to extend your project's configuration and metadata with
      your own custom specifications, which can then be referenced and utilized anywhere in
      your project, the same way as the built-in contents of the control center.
      For more complex custom specifications that cannot be defined in YAML files,
      or for data that must be generated/retrieved dynamically at runtime
      (e.g. data retrieved from a web API), ${{ name }} allows you to define custom Python scripts
      that are automatically executed during the workflow runs, and whose outputs are then made available
      to your entire project.
  

  - title: Cloud Development
    description: |
      ${{ name }} is a cloud-based solution, that is fully integrated with GitHub,
      and utilizes GitHub Actions to automate your entire software development process.
      
      ${{ name }} is a cloud-based solution, that is fully integrated with GitHub,
      and utilizes GitHub Actions to automate your entire software development process.
      This means that you can fully manage your project from within GitHub,
      and that all your project's key information and configuration are stored in your repository,
      and are fully accessible and editable from within GitHub.
      This also means that you can fully manage your project from any device,
      and that you can easily collaborate with other developers on your project,
      without having to install any software or configure any tools on your local machine.
  

  - title: Plug & Play
    description: |
      With ${{ name }} you are only a few clicks away from releasing your Python package
      on PyPI and GitHub, deploying a complete documentation website, and having a fully configured,
      professional, and dynamic repository up and running, where the only remaining steps in your
      software development process are adding your code, unit-tests and documentation content.

      ${{ name }}'s entire infrastructure is natively implemented, self-contained, and highly secure;
      with the exception of a handful of fundamental GitHub Actions and Python libraries from
      official sources such as the Python Packaging Authority and GitHub itself,
      ${{ name }} has no external dependencies, and does not rely on any third-party services.

license:
  id: AGPL-3.0-or-later
copyright:
  notice: ${{ copyright.period }} ${{ team.owner.name.full }}
team:
  aariam:
    github:
      user: aariam
  rlrios:
    github:
      user: raquellrios
  avolkamer:
    github:
      user: andreavolkamer
maintainer:
  code_owners:
    owners:
      # Default owners for everything, unless a later match takes precedence.
      - "*": [ '${{ team.aariam }}' ]
  issue:
    app_bug: [ '${{ team.aariam }}' ]
    app_request_enhancement: [ '${{ team.aariam }}' ]
    app_request_feature: [ '${{ team.aariam }}' ]
    app_request_breaking: [ '${{ team.aariam }}' ]
  discussion:
    announcements: [ '${{ team.aariam }}' ]
  security: '${{ team.aariam }}'
  code_of_conduct: '${{ team.aariam }}'
  support: '${{ team.aariam }}'
citation:
  title: "${{ name }}: ${{ title }}"
  authors:
    - '${{ team.aariam }}'
    - '${{ team.rlrios }}'
    - '${{ team.avolkamer }}'
  contacts:
    - '${{ team.avolkamer }}'
    - '${{ team.aariam }}'
  message: If you use ${{ name }}, please cite it using this reference.
custom:
  name_ipa: "ˈpaɪˌpækɪt"

