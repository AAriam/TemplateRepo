# Load repository metadata.

name: "Dispatchable: Load Metadata"
run-name: Load repository metadata from ${{ github.event.inputs.branch || github.ref }}

on:
  workflow_dispatch:
    inputs:
      force-update:
        description: "Ignore cached metadata and force update."
        default: false
        required: false
        type: boolean
      force-update-cache:
        description: "Force update the cached API metadata."
        default: false
        required: false
        type: boolean
      branch:
        description: "Branch to load metadata from"
        required: false
        type: string
        default: ""
      path-repodynamics:
        description: "Path to the `repo` directory containing the metadata, templates and dynamics module."
        default: 'dev/repodynamics'
        required: false
        type: string
  workflow_call:
    inputs:
      force-update:
        description: "Force update of the cached metadata."
        default: false
        required: false
        type: boolean
      force-update-cache:
        description: "Force update the cached API metadata."
        default: false
        required: false
        type: boolean
      branch:
        description: "Branch to load metadata from"
        required: false
        type: string
        default: ""
      path-repodynamics:
        description: "Path to the `repo` directory containing the metadata, templates and dynamics module."
        default: 'dev/repodynamics'
        required: false
        type: string
    outputs:
      json:
        description: 'Repository Metadata'
        value: ${{jobs.load.outputs.metadata}}


jobs:

  load:
    name: 'Load'
    outputs:
      metadata: ${{ steps.output.outputs.json }}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository from ${{ inputs.branch || github.ref }}'
        uses: actions/checkout@v3
        with:
          # For pull requests, check out the source branch (head_ref), not the target branch (base_ref).
          ref: ${{ inputs.branch }}

#      - name: 'Setup environment'
#        # https://github.com/mamba-org/setup-micromamba
#        uses: mamba-org/setup-micromamba@v1
#        with:
#          environment-file: ${{ inputs.path-repodynamics}}/requirements.yaml
#          cache-environment: true
#          cache-environment-key: repo-dynamics
#          generate-run-shell: true
#          init-shell: bash

      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y-%W")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache metadata
        id: cache
        # This returns a cache-hit output, which is either 'true' or 'false' (str, not bool).
        # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#using-the-cache-action
        # https://github.com/actions/cache
        uses: actions/cache@v3
        with:
          path: |
            metadata.json
            metadata_pretty.json
            metadata_cache.yaml
          # Cache is invalidated when the week changes, or when the metadata files change.
          # Ref. hashFiles: https://docs.github.com/en/actions/learn-github-actions/expressions#hashfiles
          key: metadata-${{ steps.get-date.outputs.date }}-${{ hashFiles('meta/metadata/*.yaml', 'meta/config/*.yaml', 'src/metadata.yaml', 'dev/repodynamics/src/pypackit/metadata.py') }}

      - name: 'Setup Python'
        if: inputs.force-update || steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v4
        with:
          python-version-file: ${{inputs.path-repodynamics}}/pyproject.toml
          cache: 'pip'
          cache-dependency-path: ${{inputs.path-repodynamics}}/pyproject.toml

      - name: 'Install RepoDynamics'
        if: inputs.force-update || steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -e ${{inputs.path-repodynamics}}

      - name: 'Get metadata'
        if: inputs.force-update || steps.cache.outputs.cache-hit != 'true'
        id: get-metadata
#        shell: bash -el {0}
        run: >-
          get-metadata
          --cachefile metadata_cache.yaml
          --output metadata.json
          --output_pretty metadata_pretty.json
          ${{ inputs.force-update-cache && '--update-cache' || '' }}

#        echo "json=$(get-metadata --output metadata.json)" >> $GITHUB_OUTPUT
#        echo "json=$(python ${{inputs.path-repodynamics}}/dynamics/metadata.py)" >> $GITHUB_OUTPUT

      - name: 'Output metadata'
        if: always()
        id: output
        run: echo "json=$(cat metadata.json)" >> $GITHUB_OUTPUT

      - name: 'Upload metadata as artifact'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: metadata_pretty.json #${{ inputs.path-repodynamics}}/metadata/metadata_full.json
          name: 'metadata'

      - name: 'Create job summary'
        if: always()
        run: |
          echo "Repository metadata loaded from <code>${{ inputs.branch || github.ref }}</code>." >> $GITHUB_STEP_SUMMARY
          echo "The JSON output is uploaded as an artifact named <code>metadata</code>, and can also be viewed below:" >> $GITHUB_STEP_SUMMARY
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>ðŸ–¥â€‚JSON Output</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat metadata_pretty.json >> "$GITHUB_STEP_SUMMARY"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
