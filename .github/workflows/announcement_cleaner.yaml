name: "[A]: Expire Announcement"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:

  load-metadata:
    name: 'Load repository metadata'
    uses: ./.github/workflows/repo_get-metadata.yaml


  check-expiration:
    name: 'Check expiration date'
    needs: load-metadata
    outputs:
      expired: ${{ steps.expiration-check.outputs.expired }}
    runs-on: ubuntu-latest
    steps:

      - name: 'Verify branch'
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "This workflow can only be triggered from the main branch."
            exit 1
          fi

      - name: 'Checkout repository from ${{ github.ref }}'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Calculate expiration date'
        id: expiration-check
        run: |
          filepath=${{ fromJSON(needs.load-metadata.outputs.json).paths.website_sphinx_announcement }}
          current_announcement=$(<$filepath)
          echo "Current announcement: $current_announcement"
          
          if [ "$current_announcement" = "" ]; then
              echo "No current announcement exists."
              echo "#### 🏁  Result" >> $GITHUB_STEP_SUMMARY
              echo "* ✅ 📭 No announcement to check. The last announcement was removed $(git log -1 --format=%cd --date=relative $filepath) ($(git log -1 --format=%cd $filepath))." >> $GITHUB_STEP_SUMMARY
              echo "expired=false" >> $GITHUB_OUTPUT
          else
              last_commit_date=$(git log -1 --format=%cd --date=unix $filepath)
              echo "Last commit timestamp:  $last_commit_date"
              echo "### 📣  Current Announcement" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`html" >> $GITHUB_STEP_SUMMARY
              echo "$current_announcement" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "#### ℹ️  Commit Details:**" >> $GITHUB_STEP_SUMMARY
              echo "$(git log -1 $filepath)" >> $GITHUB_STEP_SUMMARY
              
              current_date=$(date -u +%s)
              echo "Current timestamp: $current_date"
              echo "**Current Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
              
              
              elapsed_seconds=$(($current_date - $last_commit_date))
              echo "Elapsed seconds: $elapsed_seconds"
              
              retention_days=${{ fromJSON(needs.load-metadata.outputs.json).website.announcement_retention_days }}
              retention_seconds=$((retention_days * 24 * 60 * 60))
              echo "Retention seconds: $retention_seconds"
              
              echo "#### ⏳️ Retention Period" >> $GITHUB_STEP_SUMMARY
              echo "* Allowed: $retention_days days" >> $GITHUB_STEP_SUMMARY
              elapsed_days=$(bc -l <<<"scale=2 ; $elapsed_seconds / 86400")
              echo "Elapsed days: $elapsed_days"
              echo "scale=4 ; $elapsed_seconds / 86400" | bc
              echo "* Elapsed: $elapsed_days days (Current: $(date -u))" >> $GITHUB_STEP_SUMMARY
              
              echo "### 🏁  Result" >> $GITHUB_STEP_SUMMARY
              if (($elapsed_seconds > $retention_seconds)); then
                  echo "Announcement is expired."
                  echo "✅ 🗑  Announcement is expired and will be now removed." >> $GITHUB_STEP_SUMMARY
                  echo "expired=true" >> $GITHUB_OUTPUT
              else
                  echo "Announcement is not yet expired."
                  echo "❎ 📬  Announcement is not yet expired. It will be removed in $(echo "$retention_days - $elapsed_days" | bc) days." >> $GITHUB_STEP_SUMMARY
                  echo "expired=false" >> $GITHUB_OUTPUT
              fi
          fi


  remove:
    name: 'Remove announcement'
    needs: check-expiration
    if: needs.check-expiration.outputs.expired == 'true'
    uses: ./.github/workflows/announcement.yaml
    permissions:
      contents: write
    with:
      announcement: ""
      trigger: "expiration"

