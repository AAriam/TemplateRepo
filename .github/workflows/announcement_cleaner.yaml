name: "[A]: Expire Announcement"

on:

  workflow_dispatch:

jobs:

  metadata:
    name: 'Load repository metadata'
    uses: ./.github/workflows/repo_get-metadata.yaml

  expire:
    name: 'Make announcement'
    needs: metadata
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:

      - name: 'Verify branch'
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "This workflow can only be triggered from the main branch."
            exit 1
          fi

      - name: 'Checkout repository from ${{ github.ref }}'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Display announcement'
        id: expiration-check
        run: |
          last_commit_date=$(git log -1 --format=%cd --date=unix ${{ fromJSON(needs.metadata.outputs.json).paths.website_sphinx_announcement }})
          echo "Last commit date:  $last_commit_date"
          current_date=$(date -u +%s)
          echo "Current date: $current_date"
          time_difference=$(($current_date - $last_commit_date))
          echo "Elapsed time: $time_difference"
          if ((time_difference > ${{ fromJSON(needs.metadata.outputs.json).website.announcement_retention_time }})); then
              "expired='true'" >> $GITHUB_OUTPUT
          else
              "expired='false'" >> $GITHUB_OUTPUT
          fi

      - name: 'Remove announcement'
        if: steps.expiration-check.outputs.expired == 'true'
        uses: ./.github/workflows/announcement.yaml
        with:
          announcement: ""
          trigger: "expiration"

#      - name: 'Update announcement file'
#        run: echo "${{ github.event.inputs.announcement }}" > ${{ fromJSON(needs.metadata.outputs.json).paths.website_sphinx_announcement }}
#
#      - name: 'Commit changes and push'
#        # https://github.com/marketplace/actions/git-auto-commit
#        uses: stefanzweifel/git-auto-commit-action@v4
#        with:
#          file_pattern: ${{ fromJSON(needs.metadata.outputs.json).paths.website_sphinx_announcement }}
#          commit_message: >-
#            docs(announcement): update announcement for ${{ inputs.trigger }}
#          commit_user_name: RepoDynamics[bot]
#
      - name: 'Create job summary'
        if: always()
        run: |
          echo $(git log -1 --format=%cd ${{ fromJSON(needs.metadata.outputs.json).paths.website_sphinx_announcement }}) >> $GITHUB_STEP_SUMMARY
#          echo "Following announcement was published ${{ (github.event_name == 'workflow_dispatch' && format('{0} {1}', 'manually by', github.actor)) || format('{0} {1}', 'automatically for', inputs.trigger) }}:" >> $GITHUB_STEP_SUMMARY
#          echo "\`\`\`html" >> $GITHUB_STEP_SUMMARY
#          echo "${{ inputs.announcement }}" >> "$GITHUB_STEP_SUMMARY"
#          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY