# Install the package from a given source and run unit tests.

name: 'Package - Test'
run-name: 'Package: Install and test from ${{github.ref}}'

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      json-filepath:
        description: "Path to the project's main JSON metadata file."
        default: './metadata/main.json'
        required: false
        type: string

      install-source:
        description: "Source to install the package; options: 'local', 'testpypi', 'pypi'."
        default: 'local'
        required: false
        type: string

      install-version:
        description: "Version of the package to install, when `install_source` is 'testpypi' or 'pypi'."
        default: ""
        required: false
        type: string


jobs:

  echo:
    name: 'Echo inputs'
    runs-on: ubuntu-latest
    steps:
      - name: 'echo'
        run: |
          echo 'install-source: ${{inputs.install-source}}'
          echo 'install-version: ${{inputs.install-version}}'
          echo 'json-filepath: ${{inputs.json-filepath}}'

  metadata:
    # Read package metadata from JSON file and output required variables.
    name: 'Read metadata'
    outputs:
      package-name: ${{ fromJson(steps.get.outputs.json).package.name }}
      python-versions: ${{ toJson(fromJson(steps.get.outputs.json).package.python_versions) }}
      operating-systems: ${{ toJson(fromJson(steps.get.outputs.json).package.operating_systems) }}
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repository'
        # https://github.com/actions/checkout
        uses: actions/checkout@v3

      - name: 'Get metadata'
        id: get
        uses: ./.github/actions/get-metadata
        with:
          json-filepath: ${{inputs.json-filepath}}

      - name: 'Echo extracted metadata'
        run: |
          echo "Package Name: ${{ fromJson(steps.get.outputs.json).package.name }}" 
          echo "Python Versions: ${{ toJson(fromJson(steps.get.outputs.json).package.python_versions) }}" 
          echo "OS: ${{ toJson(fromJson(steps.get.outputs.json).package.operating_systems) }}"

  test-suite:
    name: 'Test (Py ${{ matrix.python-version }}, ${{ matrix.os }})'
    needs: metadata
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.metadata.outputs.operating-systems) }}
        python-version: ${{ fromJson(needs.metadata.outputs.python-versions) }}
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Set up Python ${{inputs.python-version}}'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python Version
        run: python -c "import sys; print(sys.version)"

      - name: 'Update pip'
        run: |
          python -m pip install --upgrade pip

      - name: 'Install from local source'
        if: inputs.install-source == 'local'
        run: python -m pip install .

      - name: 'Install from TestPyPI'
        if: inputs.install-source == 'testpypi'
        run: |
          python -m pip install ${{needs.metadata.outputs.package-name}}==${{inputs.install-version}} \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple/ \

      - name: 'Install from PyPI'
        if: inputs.install-source == 'pypi'
        run: python -m pip install ${{needs.metadata.outputs.package-name}}==${{inputs.install-version}}

      - name: 'Test import package'
        shell: python
        run: |
          import ${{ needs.metadata.outputs.package-name }} as pkg
          print(pkg.__version__)

      - name: 'Install test dependencies'
        run: |
          python -m pip install --upgrade pytest pytest-cov pipreqs

      - name: 'Echo environment'
        run: python -m pip list

      - name: 'Print System Info'
        run: |
          echo "OS and hardware info:"
          uname -a
          echo "Disk space usage:"
          df -h
          echo "Available system resources:"
          ulimit -a

      - name: 'Run dependency tests'
        run: pipreqs ./src --debug --print

      - name: 'Run unit tests'
        run: |
          pytest -c pyproject.toml --cov=${{needs.metadata.outputs.package-name}} \
          --cov-report=xml 

      - name: 'Upload coverage reports to codecov'
        if: always() && ${{inputs.install-source}} == 'local'
        # https://github.com/codecov/codecov-action
        uses: codecov/codecov-action@v3.1.4
        with:
          fail_ci_if_error: true
          verbose: true
          env_vars: OS,PYTHON
      


      
      
