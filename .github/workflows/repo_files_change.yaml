name: "Callable: Get Changed Files"
run-name: "Repo: Get changed files in ${{github.event_name}} event"

on:
  workflow_call:
    outputs:
      package:
        value: ${{ jobs.changes.outputs.package }}
      docs:
        value: ${{ jobs.changes.outputs.docs }}
      workflows:
        value: ${{ jobs.changes.outputs.workflows }}
      repodynamics:
        value: ${{ jobs.changes.outputs.repodynamics }}
      meta:
        value: ${{ jobs.changes.outputs.meta }}

jobs:

  changes:
    name: 'changes'
    outputs:
      package: ${{ steps.groups.outputs.package_any_modified }}
      docs: ${{ steps.groups.outputs.docs_any_modified }}
      workflows: ${{ steps.groups.outputs.workflows_any_modified }}
      repodynamics: ${{ steps.groups.outputs.repodynamics_any_modified }}
      meta: ${{ steps.groups.outputs.meta_any_modified }}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Get all changed files'
        # https://github.com/marketplace/actions/changed-files
        uses: tj-actions/changed-files@v37
        id: all

      - name: 'Get changed groups'
        uses: tj-actions/changed-files@v37
        id: groups
        with:
          files_yaml_from_source_file: .github/config/changed_files.yaml

      - name: 'Create summary'
        env:
          GROUPS: ${{ toJson(steps.groups.outputs) }}
          ALL: ${{ toJson(steps.all.outputs) }}
        shell: python
        run: |
          import os
          import json
          
          groups = json.loads("""${{ env.GROUPS }}""", strict=False)
          all_files = dict(sorted(json.loads("""${{ env.ALL }}""", strict=False).items()))
          sep_groups = dict()
          for item_name, val in groups.items():
            group_name, attr = item_name.split("_", 1)
            group = sep_groups.setdefault(group_name, dict())
            group[attr] = val
          group_summary_str = ""
          for group_name, group_attrs in sep_groups.items():
            sep_groups[group_name] = dict(sorted(group_attrs.items()))
            group_summary_str += (
              f"- {'‚úÖ' if group_attrs['any_modified'] else '‚ùå'}‚ÄÇ**{group_name.capitalize()}**\n"
          )
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as fh:
            print(
              f"""
          ### Changed Categories
          {group_summary_str}
          
          <details><summary>üñ•‚ÄÇAll files</summary>
          
          ```json
          {json.dumps(all_files, indent=4)}
          ```
          
          </details><details><summary>üñ•‚ÄÇFile Categories</summary>
          
          ```json
          {json.dumps(sep_groups, indent=4)}
          ```
          
          </details>
          """, 
              file=fh
            )

#        run: |
#          echo "### Changed Groups" >> $GITHUB_STEP_SUMMARY
#
#          echo "- ${{ (steps.groups.outputs.package_any_modified == 'true' && '‚úÖ') || '‚ùå' }} ‚ÄÇ**Package**" >> $GITHUB_STEP_SUMMARY
#          echo "- ${{ (steps.groups.outputs.docs_any_modified == 'true' && '‚úÖ') || '‚ùå' }} ‚ÄÇ**Docs**" >> $GITHUB_STEP_SUMMARY
#          echo "- ${{ (steps.groups.outputs.workflows_any_modified == 'true' && '‚úÖ') || '‚ùå' }} ‚ÄÇ**Workflows**" >> $GITHUB_STEP_SUMMARY
#          echo "- ${{ (steps.groups.outputs.repodynamics_any_modified == 'true' && '‚úÖ') || '‚ùå' }} ‚ÄÇ**RepoDynamics**" >> $GITHUB_STEP_SUMMARY
#          echo "- ${{ (steps.groups.outputs.meta_any_modified == 'true' && '‚úÖ') || '‚ùå' }} ‚ÄÇ**Meta**" >> $GITHUB_STEP_SUMMARY
#
#          echo "### Changed Files" >> $GITHUB_STEP_SUMMARY
#
#          for file in ${{ steps.all.outputs.all_changed_and_modified_files }}; do
#            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
#          done
