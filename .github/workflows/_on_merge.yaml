# Continuous Integration pipeline

name: CD
run-name: 'CD: Triggered on ${{github.ref}}'

on:
  pull_request:
    branches:
      - main
      - 'release/v[0-9]+'
    types:
      - closed


jobs:

  not-merged:
    name: 'Verify merge'
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "#### 🏁 Result" >> $GITHUB_STEP_SUMMARY
          echo "* The pull request was closed without merging." >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat ${{github.event_path}} >> "$GITHUB_STEP_SUMMARY"
          echo "" >> $GITHUB_STEP_SUMMARY

  merged:
    name: 'Verify merge'
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "#### 🏁 Result" >> $GITHUB_STEP_SUMMARY
        echo "* The pull request was merged; initiating deployment sequence." >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        cat ${{github.event_path}} >> "$GITHUB_STEP_SUMMARY"
        echo "" >> $GITHUB_STEP_SUMMARY

  metadata:
    name: 'Load repository metadata'
    needs: merged
    uses: ./.github/workflows/repo_meta.yaml

  log:
    name: 'Log changes'
    needs: merged
    outputs:
      release: ${{ steps.log.outputs.release }}
      release-notes: ${{ steps.log.outputs.release-notes }}
      docs: ${{ steps.log.outputs.docs }}
      tag: ${{ steps.log.outputs.tag }}
      commit-hash: ${{ steps.commit.outputs.commit_hash }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      - name: 'Checkout ${{github.base_ref}}'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          fetch-depth: 0

      - name: 'Setup Python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: 'Install RepoDynamics'
        run: |
          python -m pip install --upgrade pip
          pip install dev/repodynamics

      - id: log
        run: repodynamics-deploy "${{ github.event_path }}"

#      - run: |
#          import json
#          import os
#
#          x = json.loads("""${{ toJSON(github) }}""", strict=False)
#          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
#            print(f'json={json.dumps(x, )}', file=fh)
#          with open("github_workload.json", "w") as f:
#            json.dump(x, f, indent=4)
#
#        id: ff
#        shell: python

#      - run: echo "${{ steps.ff.outputs.json }}"

      - name: 'Commit changes and push'
        # https://github.com/marketplace/actions/git-auto-commit
        uses: stefanzweifel/git-auto-commit-action@v4
        id: commit
        with:
          branch: ${{ github.base_ref }}
          commit_message: 'chore: update changelog'
          commit_user_name: 'RepoDynamics[bot]'

#      - run: |
#          echo "### Changed Groups" >> $GITHUB_STEP_SUMMARY
#          cat README.md >> "$GITHUB_STEP_SUMMARY"


  tag:
    name: 'Create release tag'
    needs: log
    if: needs.log.outputs.release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.log.outputs.commit-hash }}

      - name: Tag and push current repo code
        run: |
          git config --global user.email ${{ github.actor }}@users.noreply.github.com
          git config --global user.name ${{ github.actor }}
          git tag -a ${{ needs.log.outputs.tag }} -m "Release ${{ needs.log.outputs.tag }}"
          git push origin ${{ needs.log.outputs.tag }}

  docs-build:
    name: 'Build documentation with Sphinx'
    needs: [log, tag]
    if: ${{ !failure() && needs.log.outputs.docs == 'true' }}
    uses: ./.github/workflows/docs_build.yaml
    with:
      checkout-ref: ${{ (needs.log.outputs.release == 'true' && needs.log.outputs.tag) || needs.log.outputs.commit-hash }}

  docs-deploy:
    name: 'Deply documentation website'
    needs: [docs-build]
    uses: ./.github/workflows/docs_deploy.yaml
    permissions:
      contents: read
      pages: write
      id-token: write

  package-build:
    name: 'Build distribution package'
    needs: [metadata, log, tag]
    if: ${{ !failure() && needs.log.outputs.release == 'true' }}
    uses: ./.github/workflows/package_build.yaml
    with:
      metadata: ${{needs.metadata.outputs.json}}
      checkout-ref: ${{ needs.log.outputs.tag }}

  publish-pypi:
    name: 'Publish on PyPI'
    needs: [package-build]
    if: ${{ !failure() && needs.log.outputs.release == 'true' }}
    uses: ./.github/workflows/package_release_pypi.yaml
    permissions:
      id-token: write
    with:
      package-name: ${{ needs.package-build.outputs.package-name }}
      package-version: ${{ needs.package-build.outputs.package-version }}
      artifact-name: ${{ needs.package-build.outputs.artifact-name }}
      platform-name: 'pypi'

  release:
    needs: [metadata, log, tag, package-build, docs-build]
    if: ${{ !failure() && needs.log.outputs.release == 'true' }}
    permissions:
      contents: write
      discussions: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.log.outputs.tag }}

      - name: 'Download sdist and wheels artifacts'
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.package-build.outputs.artifact-name }}
          path: distribution

      - name: 'Download gh-pages artifact'
        uses: actions/download-artifact@v3
        with:
          name: docs
          path: documentation

      - name: 'Zip artifacts'
        run: |
          mv distribution/*.tar.gz ./
          zip -r wheels.zip distribution
          zip -r documentation.zip documentation

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{fromJSON(needs.metadata.outputs.json).project.name}} ${{ needs.log.outputs.tag }}
          tag_name: ${{ needs.log.outputs.tag }}
          body_path: RELEASE.md
          files: |
            wheels.zip
            documentation.zip
            *.tar.gz


#  release:
#    name: 'Publish release'
#    needs: [log, tag]
#    if: needs.log.outputs.release == 'true'

#  test:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#    steps:
#      - name: 'Chekout'
#        uses: actions/checkout@v3
#        with:
#          ref: ${{ github.base_ref }}
#
#      - name: 'Setup Python'
#        uses: actions/setup-python@v4
#
#
##      - name: 'Install RepoDynamics'
##        if: inputs.force-update != 'none' || steps.cache.outputs.cache-hit != 'true'
##        run: |
##          python -m pip install --upgrade pip
##          pip install dev/repodynamics
#
#      #      - name: 'Update dynamic files'
#      #        run: repodynamics-sync-files
#
#      - run: |
#          printf '%s\n' "Testing 123" >> CHANGELOG.md
#          cat TEST.txt
#
#      - name: 'Commit changes and push'
#        # https://github.com/marketplace/actions/git-auto-commit
#        uses: stefanzweifel/git-auto-commit-action@v4
#        id: commit
#        with:
#          branch: ${{ github.base_ref }}
#          commit_message: 'release: updating changelog'
#          commit_user_name: 'RepoDynamics[bot]'


#  metadata:
#    name: 'Load repository metadata'
#    uses: ./.github/workflows/repo_meta.yaml
#
#  changes:
#    name: 'Get changed files'
#    uses: ./.github/workflows/repo_files_change.yaml
#
#  sync:
#    name: 'Sync files'
#    needs: changes
#    if: needs.changes.outputs.meta == 'true'
#    uses: ./.github/workflows/repo_sync.yaml
#    permissions:
#      contents: write

#  update:
#    needs: sync
#    if: |
#      !failure() &&
#      github.event_name == 'pull_request' &&
#      ( github.base_ref == 'main' || startsWith(github.base_ref, 'release/v') ) &&
#      github.event.action == 'closed' &&
#      github.event.pull_request.merged == true
#    uses: ./.github/workflows/repo_meta_log.yaml

#  package:
#    name: 'Test package'
#    needs: [changes, metadata, sync, update]
#    if: !failure() && needs.changes.outputs.package == 'true'
#    uses: ./.github/workflows/package.yaml
#    permissions:
#      security-events: write
#      actions: read
#      contents: read
#    with:
#      metadata: ${{needs.metadata.outputs.json}}
#      checkout-ref: ${{ needs.sync.outputs.commit-hash }}
#      base-ref: ${{ github.base_ref || github.event.before }}
#      head-ref: ${{ github.head_ref || needs.sync.outputs.commit-hash || github.event.after }}
#
#
#  build-docs:
#    name: 'Build documentation with Sphinx'
#    needs: [changes, metadata, sync]
#    if: !failure() && (needs.changes.outputs.docs == 'true' || github.event_name == 'schedule')
#    uses: ./.github/workflows/docs_build.yaml
#    with:
#      metadata: ${{needs.metadata.outputs.json}}
#      checkout-ref: ${{ needs.sync.outputs.commit-hash }}
#
#
#  deploy-docs:
#    name: 'Deploy docs to GitHub Pages'
#    needs: build-docs
#    if: |
#      always() &&
#      needs.build-docs.result == 'success' &&
#      github.event_name == 'push' &&
#      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
#    uses: ./.github/workflows/docs_deploy.yaml
#    permissions:
#      contents: read
#      pages: write
#      id-token: write
#
#
#  publish-testpypi:
#    name: 'Publish on TestPyPI'
#    needs: [build-package, test-local]
#    if: |
#      always() &&
#      needs.build-package.result == 'success' &&
#      needs.test-local.result == 'success' &&
#      github.event_name == 'push' &&
#      github.ref == 'refs/heads/main'
#    uses: ./.github/workflows/package_release_pypi.yaml
#    permissions:
#      id-token: write
#    with:
#      package-name: ${{ needs.build-package.outputs.package-name }}
#      package-version: ${{ needs.build-package.outputs.package-version }}
#      artifact-name: ${{ needs.build-package.outputs.artifact-name }}
#      platform-name: 'testpypi'
#
#
#  wait-for-testpypi:
#    # Wait for 5 min before running the next job, to make sure package is registered at TestPyPI
#    name: 'Wait for TestPyPI'
#    needs: publish-testpypi
#    if: |
#      always() &&
#      needs.publish-testpypi.result == 'success'
#    runs-on: ubuntu-latest
#    steps:
#      - name: 'Waiting ...'
#        run: sleep 300s
#
#
#  test-testpypi:
#    name: 'Install and test from TestPyPI'
#    needs: [ build-package, wait-for-testpypi, publish-testpypi ]
#    if: |
#      always() &&
#      needs.publish-testpypi.result == 'success'
#    uses: ./.github/workflows/package_test.yaml
#    with:
#      install-source: "testpypi"
#      install-version: ${{ needs.build-package.outputs.package-version }}
#
#
#  publish-pypi:
#    name: 'Publish on PyPI'
#    needs: [lint, build-package, test-local, test-testpypi]
#    if: |
#      always() &&
#      needs.build-package.result == 'success' &&
#      needs.test-local.result == 'success' &&
#      needs.lint.result == 'success' &&
#      needs.test-testpypi.result == 'success' &&
#      github.event_name == 'release'
#    uses: ./.github/workflows/package_release_pypi.yaml
#    permissions:
#      id-token: write
#    with:
#      package-name: ${{ needs.build-package.outputs.package-name }}
#      package-version: ${{ needs.build-package.outputs.package-version }}
#      artifact-name: ${{ needs.build-package.outputs.artifact-name }}
#      platform-name: 'pypi'
#
#
#  wait-for-pypi:
#    # Wait for 5 min before running the next job, to make sure package is registered at TestPyPI
#    name: 'Wait for PyPI'
#    needs: publish-pypi
#    if: |
#      always() &&
#      needs.publish-pypi.result == 'success'
#    runs-on: ubuntu-latest
#    steps:
#      - name: 'Waiting ...'
#        run: sleep 300s
#
#
#  test-pypi:
#    name: 'Install and test from PyPI'
#    needs: [ build-package, wait-for-pypi, publish-pypi ]
#    if: |
#      always() &&
#      needs.publish-pypi.result == 'success'
#    uses: ./.github/workflows/package_test.yaml
#    with:
#      install-source: "pypi"
#      install-version: ${{ needs.build-package.outputs.package-version }}
#
#
