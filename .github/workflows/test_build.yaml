# Test the build of the Python package

name: Test Build
run-name: Test Build

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:

  metadata:
    name: 'Load package metadata'
    outputs:
      package_name: ${{ fromJson(steps.get_metadata.outputs.json).package.name }}
      python_versions: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.python_versions) }}
      operating_systems: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.operating_systems) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Get metadata'
        id: get_metadata
        uses: ./.github/actions/get-metadata
        with:
          json_filepath: ./metadata/main.json

      - name: 'Output metadata'
        run: |
          echo "Package Name: ${{ fromJson(steps.get_metadata.outputs.json).package.name }}" 
          echo "Python Versions: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.python_versions) }}" 
          echo "OS: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.operating_systems) }}"


  get_package:
    name: 'Generate distribution package'
    uses: ./.github/workflows/package_pypi.yaml


  build:
    name: 'Build (Python ${{ matrix.python-version }}, ${{ matrix.os }})'
    needs: metadata
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.metadata.outputs.operating_systems) }}
        python-version: ${{ fromJson(needs.metadata.outputs.python_versions) }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Print System Info
        shell: bash
        run: |
          echo "OS and hardware info:"
          uname --all
          echo "Disk space usage:"
          df -h
          echo "Available system resources:"
          ulimit -a

      - name: Display Python Version
        run: python -c "import sys; print(sys.version)"

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: 'Download sdist and wheels artifacts'
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.get_package.outputs.artifact_name }}
          path: dist

      - name: Install Package
        run: python -m pip install --no-index --find-links dist --only-binary ":all:"

      - name: Print Installed Packages
        run: python -m pip list


      - name: Install pipreqs
        run: python -m pip install --upgrade pipreqs

      - name: Check Dependencies
        run: |
          echo "PYTHONWARNINGS=error" >> $GITHUB_OUTPUT
          python -W error -m pipreqs --entry-point pipreqs --debug --print ${{ needs.metadata.outputs.package_name }}


      - name: Import Package
        shell: python
        run: |
          import ${{ needs.metadata.outputs.package_name }}
          print(${{ needs.metadata.outputs.package_name }}.__version__)