# Sync dynamic files after a modification to metadata.

# This workflow is triggered by a push or pull request that modifies files inside the 'metadata' directory.
# It then calls the local synchronization script at 'dev/repo_sync/sync_files.py' to update dynamic files.
# The modified files are then automatically committed and pushed to the head branch.

# Notes:
#  This workflow requires a personal access token called 'PAT'
#  to be created (at https://github.com/settings/personal-access-tokens/new)
#  and stored as a repository secret in the repository
#  (see https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-encrypted-secrets-for-your-repository-and-organization-for-github-codespaces#adding-secrets-for-a-repository).
#  This is required so that the new push event triggers the CI/CD workflow
#  (see https://github.com/marketplace/actions/git-auto-commit#commits-made-by-this-action-do-not-trigger-new-workflow-runs).

# References:
#  Action used for committing and pushing changes: https://github.com/marketplace/actions/git-auto-commit


name: "Repo"
run-name: 'Sync Metadata: Triggered on ${{github.ref}} by ${{github.event_name}}'

on:
  workflow_call:
    outputs:
      changes-detected:
        value: ${{jobs.update.outputs.changes-detected}}
      commit-hash:
        value: ${{jobs.update.outputs.commit-hash}}
  workflow_dispatch:


jobs:

  update:
    name: 'Update files'
    outputs:
      changes-detected : ${{ steps.commit.outputs.changes_detected }}
      commit-hash: ${{ steps.commit.outputs.commit_hash }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v3
#        with:
          # For pull requests, check out the source branch (head_ref), not the target branch
#          ref: ${{ github.head_ref }}
#          token: ${{ secrets.PAT }}

      - name: 'Setup Python'
        if: inputs.force-update != 'none' || steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v4
        with:
          python-version-file: ${{inputs.path-repodynamics}}/pyproject.toml
          cache: 'pip'
          cache-dependency-path: ${{inputs.path-repodynamics}}/pyproject.toml

      - name: 'Install RepoDynamics'
        if: inputs.force-update != 'none' || steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -e ${{inputs.path-repodynamics}}

      - name: 'Update dynamic files'
        run: repodynamics-sync-files

      - run: printf 'TEST" > TEST.txt

      - name: 'Commit changes and push'
        # https://github.com/marketplace/actions/git-auto-commit
        uses: stefanzweifel/git-auto-commit-action@v4
        id: commit
        with:
          commit_message: 'meta: sync dynamic files after metadata modification'
          commit_user_name: 'RepoDynamics[bot]'
