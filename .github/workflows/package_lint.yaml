# Run static code analysis

name: Lint
run-name: Test lint

on:
  workflow_dispatch:
  workflow_call:

defaults:
  run:
    shell: bash

jobs:

  metadata:
    name: 'Load package metadata'
    outputs:
      package-name: ${{ fromJson(steps.get_metadata.outputs.json).package.name }}
      python-versions: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.python_versions) }}
      operating-systems: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.operating_systems) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Get metadata'
        id: get_metadata
        uses: ./.github/actions/get-metadata

      - name: 'Display metadata'
        run: |
          echo "Package Name: ${{ fromJson(steps.get_metadata.outputs.json).package.name }}"
          echo "Python Versions: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.python_versions) }}" 
          echo "OS: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.operating_systems) }}"


  mypy:
    name: 'mypy (${{ matrix.os }}, python ${{ matrix.python-version }})'
    needs: metadata
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.metadata.outputs.operating-systems) }}
        python-version: ${{ fromJson(needs.metadata.outputs.python-versions) }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Setup Python ${{ matrix.python-version }}'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Install requirements'
        run: |
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install mypy[reports]

      - name: 'Environment info'
        run: |
          echo "Installed Packages:"
          pip list
          echo "Python Version:"
          python -c "import sys; print(sys.version)"
          echo "mypy Version:"
          mypy --version

      - name: 'Run mypy'
        run: |
          mkdir -p _local_reports/mypy
          mypy ./src --config-file pyproject.toml

      - name: 'Order report files'
        if: always()
        run: |
          mkdir -p artifacts/lint_reports/mypy/python_${{ matrix.python-version }}/${{ matrix.os }}
          mv _local_reports/mypy/* artifacts/lint_reports/mypy/python_${{ matrix.python-version }}/${{ matrix.os }}

      - name: 'Upload reports'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: artifacts
          name: lint


  pylint:
    name: 'Pylint'
    needs: metadata
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.metadata.outputs.operating-systems) }}
        python-version: ${{ fromJson(needs.metadata.outputs.python-versions) }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Setup Python ${{ matrix.python-version }}'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Setup MSYS2'
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-enchant

      - name: 'Install requirements'
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt update
              sudo apt install -y libenchant-2-2
              sudo apt install -y graphviz
          elif [ "$RUNNER_OS" == "Windows" ]; then
              echo "Requirement already satisfied."
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew update
              brew upgrade
              brew install enchant
          else
              echo "$RUNNER_OS not supported"
              exit 1
          fi
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install pylint[spelling]

      - name: 'Environment info'
        run: |
          echo "Installed Packages:"
          pip list
          echo "Python Version:"
          python -c "import sys; print(sys.version)"
          echo "Pylint Version:"
          pylint --version

      - name: 'Run Pylint'
        run: |
          mkdir -p _local_reports/pylint/diagrams
          pylint ./src --rcfile pyproject.toml
          mkdir -p artifacts/lint_reports/pylint/python_${{ matrix.python-version }}/${{ matrix.os }}
          mv _local_reports/pylint/* artifacts/lint_reports/pylint/python_${{ matrix.python-version }}/${{ matrix.os }}


      - name: 'Create diagrams'
        # https://pylint.readthedocs.io/en/latest/pyreverse.html
        if: always()
        run: |
          pyreverse ${{ needs.metadata.outputs.package-name }} --output-directory _local_reports/pylint/diagrams --output html --module-names y --colorized

      - name: 'Upload Pylint reports'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: _local_reports/pylint/*
          name: lint

      - name: 'Upload diagrams'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: |
            _local_reports/pylint/diagrams/*
          name: diagrams_${{ matrix.python-version }}_${{ matrix.os }}


  isort:
    name: 'Isort'
    needs: metadata
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Setup Python'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: 'Intall dependencies'
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade colorama

      - name: 'Display Python version'
        run: |
          echo '${{ steps.setup_python.outputs.python-version }}'
          python -c "import sys; print(sys.version)"

      - name: Run isort
        # https://github.com/marketplace/actions/python-isort
        # https://pycqa.github.io/isort/docs/configuration/github_action.html
        uses: isort/isort-action@master
        id: run_isort
        with:
          sort-paths: ./src
          configuration: "--settings-path pyproject.toml --check-only --diff"
#          requirements-files: "requirements.txt requirements-test.txt"

      - name: 'Save output'
        if: always()
        # Action: https://github.com/marketplace/actions/write-file
        uses: DamianReeves/write-file-action@master
        with:
          path: artifacts/lint_reports/isort.txt
          contents: ${{ steps.run_isort.outputs.isort-result }}

      - name: 'Upload isort report'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: |
            artifacts
          name: lint


  black:
    name: 'Black'
    needs: metadata
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: Run black
        id: black
        uses: psf/black@stable
        with:
          options: "--check --diff --color --config pyproject.toml"
          src: ./src
          jupyter: true

      - name: Capture console output
        if: always()
        run: |
          echo "${{ toJson(steps) }}" > steps.json
          jq -r '.["black"].logs' steps.json | base64 --decode > output.txt

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Black Reports
          path: output.txt
