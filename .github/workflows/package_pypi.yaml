# Generate a distribution package for PyPI.

name: Package for PyPI
run-name: Generate distribution package for PyPI

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      json_filepath:
        description: "Path to the JSON file to read."
        default: "./metadata/main.json"
        required: false
        type: string
    outputs:
      artifact_name:
        description: "Name of the uploaded artifact"
        value: ${{jobs.build_sdist.outputs.package_fullname}}


defaults:
  run:
    shell: bash -l {0}


jobs:

  get_package_metadata:
    name: 'Get package metadata'
    outputs:
      package_name: ${{ fromJson(steps.get_metadata.outputs.json).package.name }}
      python_versions: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.python_publish_versions) }}
      operating_systems: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.operating_systems) }}
      is_pure_python: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.is_pure_python) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Get metadata'
        id: get_metadata
        uses: ./.github/actions/get-metadata
        with:
          json_filepath: ${{inputs.json_filepath}}

      - name: 'Print extracted data'
        run: |
          echo "Package Name: ${{ fromJson(steps.get_metadata.outputs.json).package.name }}" 
          echo "Python Versions: '${{ toJson(fromJson(steps.get_metadata.outputs.json).package.python_versions) }}'" 
          echo "OS: '${{ toJson(fromJson(steps.get_metadata.outputs.json).package.operating_systems) }}'"
          echo "Is Pure Python: '${{ fromJson(steps.get_metadata.outputs.json).package.is_pure_python }}'"


  build_sdist:
    name: 'Generate source distribution'
    outputs:
      package_fullname: ${{steps.get_filename.outputs.filename}}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Build sdist'
        run: |
          pipx run build --version
          pipx run build --sdist --outdir dist/

      - name: 'Get package full name'
        id: get_filename
        shell: python
        run: |
          import os
          from pathlib import Path
          name = list((Path.cwd()/"dist").glob("*.tar.gz"))[0].stem.rstrip(".tar")
          print(name)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'filename={name}', file=fh)
          

      - name: 'Upload sdist as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
          name: ${{steps.get_filename.outputs.filename}}


  build_wheel:
    name: 'Generate built distribution (pure Python)'
    needs: [get_package_metadata, build_sdist]
    if: needs.get_package_metadata.outputs.is_pure_python == 'true'
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Build wheel'
        run: |
          pipx run build --version
          pipx run build --wheel --outdir dist/

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl
          name: ${{needs.build_sdist.outputs.package_fullname}}


  build_wheels:
    name: 'Generate native built distribution on ${{ matrix.os }}'
    needs: [get_package_metadata, build_sdist]
    if: needs.get_package_metadata.outputs.is_pure_python == 'false'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.get_package_metadata.outputs.operating_systems) }}
        python-version: ${{ fromJson(needs.get_package_metadata.outputs.python_versions) }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Print system info'
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      - name: 'Build wheel on ${{ matrix.os }}'
        env:
          CIBW_BUILD_VERBOSITY: 2
          CIBW_BUILD: ${{ matrix.python-version }}-*
        uses: pypa/cibuildwheel@v2.13.1

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          name: ${{needs.build_sdist.outputs.package_fullname}}
