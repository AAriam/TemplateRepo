# Generate a distribution package for PyPI.

name: 'Package - Build'
run-name: 'Package: Build from ${{github.ref}}'


on:
  workflow_dispatch:
  workflow_call:
    inputs:
      metadata:
        description: 'Repository metadata as a JSON string.'
        type: string
        required: true
      checkout-ref:
        description: 'Reference to checkout, i.e. the `ref` input of `actions/checkout`.'
        type: string
        required: false
        default: ""
    outputs:
      package-name:
        description: 'Name of the package.'
        value: ${{jobs.build-sdist.outputs.package-name}}
      package-version:
        description: 'Version of the package.'
        value: ${{jobs.build-sdist.outputs.package-version}}


defaults:
  run:
    shell: bash


jobs:
  load-metadata:
    name: 'Repo Metadata'
    if: github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/repo_meta.yaml

  metadata:
    name: 'Set Metadata'
    needs: load-metadata
    if: ${{ !failure() }}
    outputs:
      json: ${{steps.load-metadata.outputs.json}}
    runs-on: ubuntu-latest
    steps:
      - id: load-metadata
        shell: python
        env:
          METADATA: ${{ needs.load-metadata.outputs.json || inputs.metadata }}
        run: |
          import os
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f"json={os.environ['METADATA']}", file=fh)
#        run: |
#          printf '%s\n' "$METADATA" > metadata.json
#          echo "json=$(cat metadata.json)" >> $GITHUB_OUTPUT

  build-sdist:
    name: 'Source Distribution /'
    outputs:
      package-name: ${{steps.get_name.outputs.package-name}}
      package-version: ${{steps.get_name.outputs.package-version}}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkout-ref }}

      - name: 'Build sdist'
        run: |
          pipx run build --version
          pipx run build --sdist --outdir dist/

      - name: 'Upload sdist as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
          name: Distribution Package

      - name: 'Test README file'
        # https://twine.readthedocs.io/en/stable/#twine-check
        # https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/#validating-restructuredtext-markup
        run: pipx run twine check dist/*

      - name: 'Checkout workflow script'
        uses: actions/checkout@v3
        with:
          ref: "main"
          sparse-checkout: .github/script/workflow.py
          sparse-checkout-cone-mode: false

      - name: 'Output and summary'
        id: output
        run: python .github/script/workflow.py


  build_wheel:
    name: 'Binary Distribution'
    needs: metadata
    if: ${{ !failure() && fromJSON(needs.metadata.outputs.json).package.is_pure_python == true }}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkout-ref }}

      - name: 'Build wheel'
        run: |
          pipx run build --version
          pipx run build --wheel --outdir dist/

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl
          name: Distribution Package

      - name: 'Test README file'
        # https://twine.readthedocs.io/en/stable/#twine-check
        # https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/#validating-restructuredtext-markup
        run: pipx run twine check dist/*



  build_wheels:
    name: 'Generate native built distribution on ${{ matrix.os }}'
    needs: metadata
    if: ${{ !failure() && fromJSON(needs.metadata.outputs.json).package.is_pure_python == false }}
    runs-on: ${{ matrix.build[0] }}
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(needs.metadata.outputs.json).package.build_matrix }}
        python-version: ${{ fromJson(needs.metadata.outputs.json).package.python_versions_cibuild }}
    steps:

      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkout-ref }}

      - name: 'Build wheel on ${{ matrix.os }}'
        # https://cibuildwheel.readthedocs.io/en/stable/
        # https://github.com/pypa/cibuildwheel
        uses: pypa/cibuildwheel@v2.13.1
        env:
          CIBW_BUILD: ${{ matrix.python-version }}-${{ matrix.build[1] }}
          CIBW_BUILD_VERBOSITY: 2

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          name: Distribution Package
