# Generate a distribution package for PyPI.

name: 'Package - Build'
run-name: 'Package: Build from ${{github.ref}}'

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      metadata:
        description: 'Metadata of the repository.'
        required: true
    outputs:
      artifact-name:
        description: 'Name of the uploaded artifact containing the distribution archive.'
        value: ${{jobs.build-sdist.outputs.artifact-name}}
      package-name:
        description: 'Name of the package.'
        value: ${{jobs.build-sdist.outputs.package-name}}
      package-version:
        description: 'Version of the package.'
        value: ${{jobs.build-sdist.outputs.package-version}}

defaults:
  run:
    shell: bash

jobs:

  load-metadata:
    name: 'Load repository metadata'
    if: github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/repo_meta.yaml

  metadata:
    name: 'set repository metadata'
    needs: load-metadata
    if: !failure()
    outputs:
      json: ${{steps.load-metadata.outputs.json}}
    steps:
      - name: 'Load repository metadata'
        id: load-metadata
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "json=${{ needs.load-metadata.outputs.json }}" >> $GITHUB_OUTPUT
          else
            echo "json=${{ inputs.metadata }}" >> $GITHUB_OUTPUT
          fi

  build-sdist:
    name: 'Generate source distribution'
    outputs:
      package-name: ${{steps.get_name.outputs.package-name}}
      package-version: ${{steps.get_name.outputs.package-version}}
      artifact-name: ${{steps.get_name.outputs.artifact-name}}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Build sdist'
        run: |
          pipx run build --version
          pipx run build --sdist --outdir dist/

      - name: 'Get build name'
        id: get_name
        shell: python
        run: |
          import os
          from pathlib import Path
          fullname = list((Path.cwd()/"dist").glob("*.tar.gz"))[0].stem.rstrip(".tar")
          package_name, ver = fullname.rsplit('-', 1)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'artifact-name={fullname}', file=fh)
            print(f'package-name={package_name}', file=fh)
            print(f'package-version={ver}', file=fh)

      - name: 'Upload sdist as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
          name: ${{steps.get_name.outputs.artifact-name}}

      - name: 'Generate summary'
        run: |
          echo "Source distribution created:" >> $GITHUB_STEP_SUMMARY
          echo "- Package name: ${{steps.get_name.outputs.package-name}}" >> $GITHUB_STEP_SUMMARY
          echo "- Package version: ${{steps.get_name.outputs.package-version}}" >> $GITHUB_STEP_SUMMARY
          echo "- Artifact name: ${{steps.get_name.outputs.artifact-name}}" >> $GITHUB_STEP_SUMMARY


  build_wheel:
    name: 'Generate built distribution (pure Python)'
    needs: [metadata, build-sdist]
    if: fromJSON(needs.metadata.outputs.json).package.is_pure_python == true
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Build wheel'
        run: |
          pipx run build --version
          pipx run build --wheel --outdir dist/

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl
          name: ${{needs.build-sdist.outputs.artifact-name}}


  build_wheels:
    name: 'Generate native built distribution on ${{ matrix.os }}'
    needs: [metadata, build-sdist]
    if: fromJSON(needs.metadata.outputs.json).package.is_pure_python == false
    runs-on: ${{ matrix.build[0] }}
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(needs.metadata.outputs.json).package.build_matrix }}
        python-version: ${{ fromJson(needs.metadata.outputs.json).package.python_versions_cibuild }}
    steps:

      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Build wheel on ${{ matrix.os }}'
        # https://cibuildwheel.readthedocs.io/en/stable/
        # https://github.com/pypa/cibuildwheel
        uses: pypa/cibuildwheel@v2.13.1
        env:
          CIBW_BUILD: ${{ matrix.python-version }}-${{ matrix.build[1] }}
          CIBW_BUILD_VERBOSITY: 2

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          name: ${{needs.build-sdist.outputs.artifact-name}}
