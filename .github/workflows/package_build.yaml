# Generate a distribution package for PyPI.
# Publish the package on PyPI or TestPyPI.
# This reusable workflow uses the [pypi-publish](https://github.com/pypa/gh-action-pypi-publish) GitHub Action
# to publish the distribution package on either PyPI or TestPyPI, depending on the input.


name: 'Package: Build'
run-name: 'Package: Build from ${{github.ref}}'


on:
  workflow_dispatch:
  workflow_call:

    inputs:

      checkout-ref:
        type: string
        default: ''
        required: false
        description: |
          Reference (i.e. branch, tag or SHA) of the current repository to checkout,
          i.e. the `ref` input of `actions/checkout`.

      publish-platform:
        type: string
        default: 'TestPyPI'
        required: false
        description: |
          Platform to publish to; either 'TestPyPI' (default) or 'PyPI'.

    outputs:

      name:
        description: Name of the package.
        value: ${{jobs.build-sdist.outputs.package-name}}

      version:
        description: Version of the package.
        value: ${{jobs.build-sdist.outputs.package-version}}


jobs:

  readme:
    name: 'Generate README'
    runs-on: ubuntu-latest
    steps:
      - uses: repodynamics@readme@main


  build-sdist:
    name: 'Source Distribution /'
    outputs:
      package-name: ${{steps.get_name.outputs.package-name}}
      package-version: ${{steps.get_name.outputs.package-version}}
    needs: readme
    runs-on: ubuntu-latest
    steps:



      - name: 'Upload sdist as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
          name: Distribution Package

      - name: 'Test README file'
        # https://twine.readthedocs.io/en/stable/#twine-check
        # https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/#validating-restructuredtext-markup
        run: pipx run twine check dist/*

      - name: 'Checkout workflow script'
        uses: actions/checkout@v3
        with:
          ref: "main"
          sparse-checkout: .github/script/workflow.py
          sparse-checkout-cone-mode: false

      - name: 'Output and summary'
        id: output
        run: python .github/script/workflow.py


  build_wheel:
    name: 'Binary Distribution'
    needs: metadata
    if: ${{ !failure() && fromJSON(needs.metadata.outputs.json).package.pure_python == true }}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkout-ref }}

      - name: 'Build wheel'
        run: |
          pipx run build --version
          pipx run build --wheel --outdir dist/

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl
          name: Distribution Package

      - name: 'Test README file'
        # https://twine.readthedocs.io/en/stable/#twine-check
        # https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/#validating-restructuredtext-markup
        run: pipx run twine check dist/*



  build_wheels:
    name: 'Generate native built distribution on ${{ matrix.os }}'
    needs: metadata
    if: ${{ !failure() && fromJSON(needs.metadata.outputs.json).package.pure_python == false }}
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.metadata.outputs.json).package.cibw_matrix_platform }}
        py-ver: ${{ fromJson(needs.metadata.outputs.json).package.cibw_matrix_python }}
    steps:

      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkout-ref }}

      - name: 'Build wheel on ${{ matrix.os }}'
        # https://cibuildwheel.readthedocs.io/en/stable/
        # https://github.com/pypa/cibuildwheel
        uses: pypa/cibuildwheel@v2.13.1
        with:
          output-dir: dist
        env:
          CIBW_BUILD: ${{ matrix.py-ver }}-${{ matrix.platform.cibw_platform }}
          CIBW_BUILD_VERBOSITY: 2

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          name: Distribution Package


  package-release-pypi:
    name: "${{inputs.platform-name}} /"
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.platform-name }}
      url: ${{ steps.script.outputs.download-url }}
    permissions:
      id-token: write
    steps:
      - name: 'Download sdist and wheels artifacts'
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: dist

      - name: 'Checkout script'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          sparse-checkout: .github/script/workflow.py
          sparse-checkout-cone-mode: false

      - name: 'Run script'
        id: script
        env:
          RD_PACKAGE_NAME: ${{ inputs.package-name }}
          RD_PACKAGE_VERSION: ${{ inputs.package-version }}
          RD_PLATFORM_NAME: ${{ inputs.platform-name }}
          RD_DIST_PATH: dist
        run: python .github/script/workflow.py

      - name: 'Upload package'
        uses: pypa/gh-action-pypi-publish@release/v1
        # https://github.com/marketplace/actions/pypi-publish
        with:
          packages-dir: dist
          repository-url: ${{ steps.script.outputs.upload-url }}
          verify-metadata: true
          verbose: true
          print-hash: true
          skip-existing: false
