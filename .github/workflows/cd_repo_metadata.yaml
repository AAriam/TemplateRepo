# Load repository metadata.

name: "Dispatchable: Load Metadata"
run-name: Load repository metadata from ${{ github.event.inputs.branch || github.ref }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to load metadata from"
        required: false
        type: string
        default: ""
      path-repodynamics:
        description: "Path to the `repo` directory containing the metadata, templates and dynamics module."
        default: 'dev/repodynamics'
        required: false
        type: string
  workflow_call:
    inputs:
      branch:
        description: "Branch to load metadata from"
        required: false
        type: string
        default: ""
      path-repodynamics:
        description: "Path to the `repo` directory containing the metadata, templates and dynamics module."
        default: 'dev/repodynamics'
        required: false
        type: string
    outputs:
      json:
        description: 'Repository Metadata'
        value: ${{jobs.load.outputs.metadata}}


jobs:

  load:
    name: 'Load'
    outputs:
      metadata: ${{ steps.get-metadata.outputs.json }}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository from ${{ inputs.branch || github.ref }}'
        uses: actions/checkout@v3
        with:
          # For pull requests, check out the source branch (head_ref), not the target branch (base_ref).
          ref: ${{ inputs.branch }}

#      - name: 'Setup environment'
#        # https://github.com/mamba-org/setup-micromamba
#        uses: mamba-org/setup-micromamba@v1
#        with:
#          environment-file: ${{ inputs.path-repodynamics}}/requirements.yaml
#          cache-environment: true
#          cache-environment-key: repo-dynamics
#          generate-run-shell: true
#          init-shell: bash

      - name: 'Setup Python'
        uses: actions/setup-python@v4
        with:
          python-version-file: ${{inputs.path-repodynamics}}/pyproject.toml
          cache: 'pip'
          cache-dependency-path: ${{inputs.path-repodynamics}}/pyproject.toml

      - name: 'Install RepoDynamics'
        run: |
          pip install -e ${{inputs.path-repodynamics}}

      - name: 'Get metadata'
        id: get-metadata
#        shell: bash -el {0}
        run: echo "json=$(get-metadata --output metadata.json)" >> $GITHUB_OUTPUT
#        echo "json=$(python ${{inputs.path-repodynamics}}/dynamics/metadata.py)" >> $GITHUB_OUTPUT

      - name: 'Upload metadata as artifact'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: metadata.json #${{ inputs.path-repodynamics}}/metadata/metadata_full.json
          name: 'metadata'

      - name: 'Create job summary'
        if: always()
        run: |
          echo "Repository metadata loaded from <code>${{ inputs.branch || github.ref }}/${{ inputs.path-repodynamics}}/dynamics/metadata.py</code>." >> $GITHUB_STEP_SUMMARY
          echo "The JSON output is uploaded as an artifact named <code>metadata</code>, and can also be viewed below:" >> $GITHUB_STEP_SUMMARY
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>ðŸ–¥â€‚JSON Output</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat ${{ inputs.path-repodynamics}}/metadata/metadata_full.json >> "$GITHUB_STEP_SUMMARY"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
