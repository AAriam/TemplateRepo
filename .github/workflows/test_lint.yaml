# Run static code analysis

name: Lint
run-name: Test lint

on:
  push:
  pull_request:
  workflow_dispatch:


jobs:

  metadata:
    name: 'Load package metadata'
    outputs:
      package_name: ${{ fromJson(steps.get_metadata.outputs.json).package.name }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Get metadata'
        id: get_metadata
        uses: ./.github/actions/get-metadata

      - name: 'Output data'
        run: |
          echo "Package Name: ${{ fromJson(steps.get_metadata.outputs.json).package.name }}" 


  mypy:
    name: 'mypy'
    needs: metadata
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Setup Python'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: 'Intall mypy'
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade mypy[reports]

      - name: 'Display environment info'
        run: |
          pip list
          mypy --version
          echo Python Version: '${{ steps.setup_python.outputs.python-version }}'
          python -c "import sys; print(sys.version)"

      - name: 'Run mypy'
        run: |
          mkdir -p reports/mypy
          mypy ${{ needs.metadata.outputs.package_name }} --config-file pyproject.toml

      - name: 'Upload reports'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: |
            reports/mypy/*
          name: mypy_reports


  pylint:
    name: 'Pylint'
    needs: metadata
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Setup Python'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: 'Intall Pylint'
        run: |
          sudo apt update && sudo apt install -y libenchant-2-2
          sudo apt install graphviz
          python -m pip install --upgrade pip
          python -m pip install --upgrade pylint[spelling]

      - name: 'Display environment info'
        run: |
          pip list
          pylint --version
          echo Python Version: '${{ steps.setup_python.outputs.python-version }}'
          python -c "import sys; print(sys.version)"

      - name: Lint
        run: |
          mkdir -p reports/pylint/diagrams
          pylint ${{ needs.metadata.outputs.package_name }} --rcfile pyproject.toml

      - name: 'Create diagrams'
        # https://pylint.readthedocs.io/en/latest/pyreverse.html
        if: always()
        run: |
          pyreverse ${{ needs.metadata.outputs.package_name }} --output-directory reports/pylint/diagrams --output html --module-names y --colorized

      - name: 'Upload Pylint reports'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: |
            reports/pylint/*
          name: pylint_report

      - name: 'Upload diagrams'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: |
            reports/pylint/diagrams/*
          name: pylint_diagram


  isort:
    name: 'Isort'
    needs: metadata
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Setup Python'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: 'Intall dependencies'
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade colorama

      - name: 'Display Python version'
        run: |
          echo '${{ steps.setup_python.outputs.python-version }}'
          python -c "import sys; print(sys.version)"

      - name: Run isort
        # https://github.com/marketplace/actions/python-isort
        # https://pycqa.github.io/isort/docs/configuration/github_action.html
        uses: isort/isort-action@master
        id: run_isort
        with:
          sort-paths: ${{ needs.metadata.outputs.package_name }}
          configuration: "--settings-path pyproject.toml --check-only --diff"
#          requirements-files: "requirements.txt requirements-test.txt"

      - name: 'Save output'
        if: always()
        # Action: https://github.com/marketplace/actions/write-file
        uses: DamianReeves/write-file-action@master
        with:
          path: isort_report.txt
          contents: ${{ steps.run_isort.outputs.isort-result }}

      - name: 'Upload isort report'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: |
            isort_report.txt
          name: isort_report


  black:
    name: 'Black'
    needs: metadata
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: Run black
        id: black
        uses: psf/black@stable
        with:
          options: "--check --diff --color --config pyproject.toml"
          src: ${{ needs.metadata.outputs.package_name }}
          jupyter: true

      - name: Capture console output
        if: always()
        run: |
          echo "${{ toJson(steps) }}" > steps.json
          jq -r '.["black"].logs' steps.json | base64 --decode > output.txt

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Black Reports
          path: output.txt
