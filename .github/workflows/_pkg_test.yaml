# Install package from a given source and run unit-tests.
# Install the package and run tests on a matrix of supported Python versions and operating systems.

name: '[Callable]: Package - Test'

on:
  workflow_call:
    inputs:
      metadata:
        type: string
        required: true
        description: |
          CI metadata as a JSON string.
      ref:
        type: string
        required: false
        default: ""
        description: |
          Git reference (e.g. commit hash, branch name, tag) to checkout the repository at.
      repository:
        description: Repository to checkout, i.e. the `repository` input of `actions/checkout`
        type: string
        default: ${{ github.repository }}
        required: false
      package-source:
        type: string
        default: GitHub
        required: false
        description: Installation source of the package; one of 'GitHub', 'TestPyPI', 'PyPI'.
      package-version:
        default: ""
        required: false
        type: string
        description: |
          Version of the package to install, when package-source is not 'GitHub'.
          If not specified, the latest version is installed.

jobs:

  test:
    name: '${{ matrix.os }} - Py ${{ matrix.python-version }}'
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.metadata).package.github_runners }}
        python-version: ${{ fromJson(inputs.metadata).package.python_versions }}
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: repodynamics/pytests@main
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          python-version: ${{ matrix.python-version }}
          package-source: ${{ inputs.package-source }}
          package-name: ${{ fromJson(inputs.metadata).package.name }}
          package-version: ${{ inputs.package-version }}
          path-tests: ./${{ fromJson(inputs.metadata).path.dir.tests }}
          path-local: ./${{ fromJson(inputs.metadata).path.dir.local }}
