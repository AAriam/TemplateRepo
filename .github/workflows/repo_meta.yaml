# Load repository metadata.

name: "Dispatchable: Load Metadata"
run-name: Load repository metadata from ${{ github.event.inputs.branch || github.ref }}

on:
  workflow_dispatch:
    inputs:
      force-update:
        description: >-
          Whether to load entirely from cache (if no changes in metadata files are detected),
          force update the core metadata (but not the cached API metadata),
          or force update the core metadata and the cached API metadata.
          Note that when a change is detected, the core metadata is always updated,
          but non-expired cached API metadata is only updated when `all` is selected.
        default: none
        required: false
        type: choice
        options:
          - none
          - core
          - all
      path-repodynamics:
        description: "Path to the `repo` directory containing the metadata, templates and dynamics module."
        default: 'dev/repodynamics'
        required: false
        type: string
  workflow_call:
    inputs:
      force-update:
        description: >-
          One of `none`, `core` or `all`, deciding whether to load entirely
          from cache (if no changes in metadata files are detected),
          force update the core metadata (but not the cached API metadata),
          or force update the core metadata and the cached API metadata.
          Note that when a change is detected, the core metadata is always updated,
          but non-expired cached API metadata is only updated when `all` is selected.
        default: none
        required: false
        type: string
      branch:
        description: "Branch to load metadata from"
        required: false
        type: string
        default: ""
      path-repodynamics:
        description: "Path to the `repo` directory containing the metadata, templates and dynamics module."
        default: 'dev/repodynamics'
        required: false
        type: string
    outputs:
      json:
        description: 'Repository Metadata'
        value: ${{jobs.load.outputs.metadata}}


jobs:

  load:
    name: 'output'
    outputs:
      metadata: ${{ steps.output.outputs.json }}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository from ${{ inputs.branch || github.ref }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: 'Get current date'
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y-%W")" >> $GITHUB_OUTPUT
        shell: bash

      - name: 'Cache metadata'
        id: cache
        # This returns a cache-hit output, which is either 'true' or 'false' (str, not bool).
        # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#using-the-cache-action
        # https://github.com/actions/cache
        uses: actions/cache@v3
        with:
          path: |
            metadata.json
            metadata_pretty.json
            metadata_cache.yaml
          # Cache is invalidated when metadata files are changed, or after a week.
          # Ref. hashFiles: https://docs.github.com/en/actions/learn-github-actions/expressions#hashfiles
          key: >-
            metadata-${{ steps.get-date.outputs.date }}-${{
              hashFiles(
                'meta/metadata/*.yaml',
                'meta/config/*.yaml',
                'src/metadata.yaml',
                'dev/repodynamics/src/**/*.py'
              )
            }}

      - name: 'Setup Python'
        if: inputs.force-update != 'none' || steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v4
        with:
          python-version-file: ${{inputs.path-repodynamics}}/pyproject.toml
          cache: 'pip'
          cache-dependency-path: ${{inputs.path-repodynamics}}/pyproject.toml

      - name: 'Install RepoDynamics'
        if: inputs.force-update != 'none' || steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -e ${{inputs.path-repodynamics}}

      - name: 'Get metadata'
        if: inputs.force-update != 'none' || steps.cache.outputs.cache-hit != 'true'
        id: get-metadata
        env:
          UPDATE_CACHE: ${{ (inputs.force-update == 'all' && '--update_cache') || '' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          repodynamics-get-metadata
          --cachefile metadata_cache.yaml
          --output metadata.json
          --output_pretty metadata_pretty.json
          --github_token $GITHUB_TOKEN
          $UPDATE_CACHE

      - name: 'Output metadata'
        if: ${{ !failure() }}
        id: output
        run: echo "json=$(cat metadata.json)" >> $GITHUB_OUTPUT

      - name: 'Create job summary'
        if: ${{ !failure() }}
        run: python ./github/scripts/summary_metadata.py
        env:
          FORCE_UPDATE: ${{ inputs.force-update }}
          CACHE-HIT: ${{ steps.cache.outputs.cache-hit }}
