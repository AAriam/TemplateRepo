# Continuous Integration pipeline

name: CI
run-name: 'CI: ${{github.ref}}'

on: push


jobs:

  context:
    name: 'Workflow Run: context'
    # Generate output summary of the workflow run context.
    # This job outputs a sanitized version of the `github` context of the workflow run
    # as job summary, for the purpose of logging and debugging.
    runs-on: ubuntu-latest
    steps:
      - name: 'Output summary'
        env:
          GH_CONTEXT: ${{ toJson(github) }}
        shell: python
        run: |
          import os
          import json
        
          context = json.loads("""${{ env.GH_CONTEXT }}""", strict=False)
          _ = context.pop('token')
          payload = context.pop('event')
          context_sorted = dict(sorted(context.items()))
          payload_sorted = dict(sorted(payload.items()))
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as fh:
            print(
              f"""
          <details><summary>ðŸ–¥â€‚GitHub context</summary>
          
          ```json
          {json.dumps(context_sorted, indent=4)}
          ```
          
          </details><details><summary>ðŸ–¥â€‚Event payload</summary>
          
          ```json
          {json.dumps(payload_sorted, indent=4)}
          ```
          
          </details>
          """, 
              file=fh
            )

  metadata:
    name: 'Load repository metadata'
    uses: ./.github/workflows/repo_meta.yaml

  changes:
    name: 'Get changed files'
    uses: ./.github/workflows/repo_files_change.yaml

  sync:
    name: 'Sync files'
    needs: changes
    if: needs.changes.outputs.meta == 'true'
    uses: ./.github/workflows/repo_sync.yaml
    permissions:
      contents: write

  package:
    name: 'Test package'
    needs: [metadata, changes, sync]
    if: ${{ !failure() && needs.changes.outputs.package == 'true' }}
    uses: ./.github/workflows/package_ci.yaml
    permissions:
      pull-requests: write
      security-events: write
      actions: read
      contents: read
    with:
      metadata: ${{needs.metadata.outputs.json}}
      checkout-ref: ${{ github.ref_name }}
      base-ref: ${{ github.event.before }}
      head-ref: ${{ needs.sync.outputs.commit-hash || github.event.after }}

  docs:
    name: 'Build documentation with Sphinx'
    needs: [changes, sync]
    if: ${{ !failure() && needs.changes.outputs.docs == 'true' }}
    uses: ./.github/workflows/docs_build.yaml
    with:
      checkout-ref: ${{ github.ref_name }}
