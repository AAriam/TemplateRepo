# Continuous Integration pipeline


name: "[On Push]: CI"
run-name: 'CI: ${{github.ref}}'


on: push


jobs:

#  github-context:
#    # Generate summary of the workflow run's `github` context, for logging/debugging purposes.
#    name: 'Workflow Context /'
#    runs-on: ubuntu-latest
#    steps:
#      - name: 'Checkout script'
#        uses: actions/checkout@v3
#        with:
#          ref: 'main'  # Always load the script from the 'main' branch
#          sparse-checkout: .github/script/workflow.py
#          sparse-checkout-cone-mode: false
#      - name: 'Generate context summary'
#        env:
#          RD_CONTEXT: ${{ toJson(github) }}
#        run: python .github/script/workflow.py

  context:
    runs-on: ubuntu-latest
    name: 'Workflow Context /'
    steps:
      - uses: actions/checkout@v3
      - id: foo
        uses: repodynamics/workflow-context@main

  changes:
    # Get all changed files/categories in the repository due to the push event.
    #
    # Returns
    # -------
    # json : str
    #     String representation of a JSON object containing info about all changes.
    name: 'Repo Files'
    uses: ./.github/workflows/repo_changes.yaml


  metadata:
    # Load repository metadata.
    #
    # Returns
    # -------
    # json : str
    #     String representation of a JSON object containing the repository metadata.
    name: 'Repo Metadata'
    uses: ./.github/workflows/repo_meta.yaml


  sync:
    name: 'Repo Files'
    needs: changes
    if: fromJSON(needs.changes.outputs.json).meta.any_modified == 'true'
    uses: ./.github/workflows/repo_sync.yaml
    permissions:
      contents: write


  settings:
    name: 'Repo Settings'
    needs: [metadata, changes]
    if: |
      github.ref == 'refs/heads/main' &&
      fromJSON(needs.metadata.outputs.json).config.update_repo_settings == true &&
      fromJSON(needs.changes.outputs.json).meta.any_modified == 'true'
    uses: ./.github/workflows/repo_config.yaml
    with:
      metadata: ${{needs.metadata.outputs.json}}


  package:
    name: 'Package'
    needs: [metadata, changes, sync]
    if: ${{ !failure() && fromJSON(needs.changes.outputs.json).package.any_modified == 'true' }}
    uses: ./.github/workflows/package_ci.yaml
    permissions:
      pull-requests: write
      security-events: write
      actions: read
      contents: read
    with:
      metadata: ${{needs.metadata.outputs.json}}
      checkout-ref: ${{ github.ref_name }}
      base-ref: ${{ github.event.before }}
      head-ref: ${{ needs.sync.outputs.commit-hash || github.event.after }}


  docs:
    name: 'Docs'
    needs: [changes, sync]
    if: ${{ !failure() && fromJSON(needs.changes.outputs.json).docs.any_modified == 'true' }}
    uses: ./.github/workflows/docs_build.yaml
    with:
      checkout-ref: ${{ github.ref_name }}
