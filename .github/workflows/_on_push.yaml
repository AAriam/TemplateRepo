# Continuous Integration pipeline

name: "[On Push]: CI"
run-name: 'CI: ${{github.ref}}'

on: push


jobs:

  context:
    name: 'Workflow Run / context'
    # Generate output summary of the workflow run context.
    # This job outputs a sanitized version of the `github` context of the workflow run
    # as job summary, for the purpose of logging and debugging.
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout script'
        uses: actions/checkout@v3
        with:
          sparse-checkout: .github/scripts/context_summary.py
          sparse-checkout-cone-mode: false

      - name: 'Generate context summary'
        run: python '.github/scripts/context_summary.py'
        env:
          GH_CONTEXT: ${{ toJson(github) }}


  changes:
    name: 'Repository Files'
    # Get all changed files in the repository and the groups they belong to.
    uses: ./.github/workflows/repo_changes.yaml


  metadata:
    name: 'Repository Metadata'
    uses: ./.github/workflows/repo_meta.yaml


  sync:
    name: 'Repository Files'
    needs: changes
    if: fromJSON(needs.changes.outputs.json).meta.any_modified == 'true'
    uses: ./.github/workflows/repo_sync.yaml
    permissions:
      contents: write


  settings:
    name: 'Repository Settings'
    needs: [metadata, changes]
    if: |
      github.ref == 'refs/heads/main' &&
      fromJSON(needs.metadata.outputs.json).config.update_repo_settings == true &&
      fromJSON(needs.changes.outputs.json).meta.any_modified == 'true'
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: 'Update repository info'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "${{ fromJSON(needs.metadata.outputs.json).project.name }}",
              description: "${{ fromJSON(needs.metadata.outputs.json).project.tagline }}",
              homepage: "${{ fromJSON(needs.metadata.outputs.json).url.website.home }}",
              has_issues: true,
              default_branch: 'main',
              delete_branch_on_merge: true,
            })
            github.rest.repos.replaceAllTopics({
              owner: context.repo.owner,
              repo: context.repo.repo,
              names: ${{ toJSON(fromJSON(needs.metadata.outputs.json).project.keywords_slugs) }}
            })


  package:
    name: 'Test package'
    needs: [metadata, changes, sync]
    if: ${{ !failure() && fromJSON(needs.changes.outputs.json).package.any_modified == 'true' }}
    uses: ./.github/workflows/package_ci.yaml
    permissions:
      pull-requests: write
      security-events: write
      actions: read
      contents: read
    with:
      metadata: ${{needs.metadata.outputs.json}}
      checkout-ref: ${{ github.ref_name }}
      base-ref: ${{ github.event.before }}
      head-ref: ${{ needs.sync.outputs.commit-hash || github.event.after }}


  docs:
    name: 'Build documentation with Sphinx'
    needs: [changes, sync]
    if: ${{ !failure() && fromJSON(needs.changes.outputs.json).docs.any_modified == 'true' }}
    uses: ./.github/workflows/docs_build.yaml
    with:
      checkout-ref: ${{ github.ref_name }}
