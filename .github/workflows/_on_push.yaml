# Continuous Integration pipeline

name: "[On Push]: CI"
run-name: 'CI: ${{github.ref}}'

on: push


jobs:

  context:
    name: 'Workflow Run / context'
    # Generate output summary of the workflow run context.
    # This job outputs a sanitized version of the `github` context of the workflow run
    # as job summary, for the purpose of logging and debugging.
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout script'
        uses: actions/checkout@v3
        with:
          sparse-checkout: .github/scripts/context_summary.py
          sparse-checkout-cone-mode: false

      - name: 'Generate context summary'
        run: python '.github/scripts/context_summary.py'
        env:
          GH_CONTEXT: ${{ toJson(github) }}


  changes:
    name: 'Repository Files'
    # Get all changed files in the repository and the groups they belong to.
    uses: ./.github/workflows/repo_changes.yaml


  metadata:
    name: 'Repository Metadata'
    uses: ./.github/workflows/repo_meta.yaml


  sync:
    name: 'Repository Files'
    needs: changes
    if: fromJSON(needs.changes.outputs.json).meta.any_modified == 'true'
    uses: ./.github/workflows/repo_sync.yaml
    permissions:
      contents: write


  settings:
    name: 'Repository Settings'
    needs: [metadata, changes]
    if: |
      github.ref == 'refs/heads/main' &&
      fromJSON(needs.changes.outputs.json).meta.any_modified == 'true'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Update repository description'
        run: >-
          gh repo edit 
          --description "${{ fromJSON(needs.metadata.outputs.json).project.tagline }}"

      - name: 'Format repository topics'
        id: topics
        env:
          METADATA: ${{ needs.metadata.outputs.json }}
        shell: python
        run: |
          import json
          import os
          metadata = json.loads(os.environ['METADATA'], strict=False)
          keywords = metadata['project']['keywords']
          # GitHub only allows max. 50 characters for topics
          char_count = 0
          for idx, keyword in enumerate(keywords):
            word_len = len(keyword)
            if char_count + word_len >= 50:
              break
            char_count += len(keyword)
          topics = ' '.join([f'"{key}"' for key in keywords[:idx]])
          print(topics)
          print(len(topics))
          print(len(topics.replace(' ', '')))
          with open(os.environ['GITHUB_OUTPUT'], "a") as fh:
              print(f"topics={topics}", file=fh)

      - name: 'Update repository topics'
        run: gh repo edit --add-topic "test"

  package:
    name: 'Test package'
    needs: [metadata, changes, sync]
    if: ${{ !failure() && fromJSON(needs.changes.outputs.json).package.any_modified == 'true' }}
    uses: ./.github/workflows/package_ci.yaml
    permissions:
      pull-requests: write
      security-events: write
      actions: read
      contents: read
    with:
      metadata: ${{needs.metadata.outputs.json}}
      checkout-ref: ${{ github.ref_name }}
      base-ref: ${{ github.event.before }}
      head-ref: ${{ needs.sync.outputs.commit-hash || github.event.after }}

  docs:
    name: 'Build documentation with Sphinx'
    needs: [changes, sync]
    if: ${{ !failure() && fromJSON(needs.changes.outputs.json).docs.any_modified == 'true' }}
    uses: ./.github/workflows/docs_build.yaml
    with:
      checkout-ref: ${{ github.ref_name }}
