# Continuous Integration pipeline

name: CI/CD
run-name: 'CI/CD: Triggered by ${{github.event_name}} at ${{github.ref}}'

on:
  push:
  pull_request:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'

jobs:

  echo_git:
    name: echo github
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{toJson(github)}}"

  build-package:
    name: 'Build distribution package'
    if: always()
    uses: ./.github/workflows/package_build.yaml

  test-local:
    name: 'Install and test from ${{github.ref}}'
    if: always()
    uses: ./.github/workflows/package_test.yaml
    with:
      install-source: "local"

  build-docs:
    name: 'Build documentation with Sphinx'
    if: always()
    uses: ./.github/workflows/docs_build.yaml

  deploy-docs:
    name: 'Deploy docs to GitHub Pages'
    needs: build-docs
    if: |
      always() && 
      needs.build-docs.result == 'success' &&
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    uses: ./.github/workflows/docs_gh-pages.yaml
    permissions:
      contents: read
      pages: write
      id-token: write

  publish-testpypi:
    name: 'Publish on TestPyPI'
    needs: [test-local, build-package]
    if: | 
      always() && 
      needs.test-local.result == 'success' &&
      needs.build-package.result == 'success' &&
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main'
    uses: ./.github/workflows/publish_testpypi.yaml
    permissions:
      id-token: write
    with:
      package-name: ${{ needs.build-package.outputs.package-name }}
      artifact-name: ${{ needs.build-package.outputs.artifact-name }}

  publish-pypi:
    name: 'Publish on PyPI'
    needs: [test-local, build-package]
    if: |
      always() &&
      needs.test-local.result == 'success' &&
      needs.build-package.result == 'success' &&
      github.event_name == 'release'
    uses: ./.github/workflows/publish_pypi.yaml
    permissions:
      id-token: write
    with:
      package-name: ${{ needs.build-package.outputs.package-name }}
      artifact-name: ${{ needs.build-package.outputs.artifact-name }}

  wait-for-publish:
    # Wait for 5 min before running the next job, to make sure package is registered at TestPyPI
    name: 'Wait for (Test)PyPI'
    needs: [publish-pypi, publish-testpypi]
    if: |
      always() && 
      ( needs.publish-pypi.result == 'success' || needs.publish-testpypi.result == 'success' )
    runs-on: ubuntu-latest
    steps:
      - name: 'Waiting ...'
        run: sleep 300s

  test-testpypi:
    name: 'Install and test from TestPyPI'
    needs: [build-package, wait-for-publish, publish-testpypi]
    if: |
      always() &&
      needs.publish-testpypi.result == 'success'
    uses: ./.github/workflows/package_test.yaml
    with:
      install-source: "testpypi"
      install-version: ${{ needs.build-package.outputs.package-version }}

  test-pypi:
    name: 'Install and test from PyPI'
    needs: [ build-package, wait-for-publish, publish-pypi ]
    if: |
      always() &&
      needs.publish-pypi.result == 'success'
    uses: ./.github/workflows/package_test.yaml
    with:
      install-source: "pypi"
      install-version: ${{ needs.build-package.outputs.package-version }}


