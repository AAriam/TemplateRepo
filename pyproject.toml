#
#
#
#
#


[build-system]
requires = ["setuptools>=61.0", "versioningit"]
build-backend = "setuptools.build_meta"


# ----------------------------------------- setuptools -------------------------------------------
[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ["."]
namespaces = false


# ----------------------------------------- versioningit -----------------------------------------
[tool.versioningit]

[tool.versioningit.vcs]
method = "git"
match = ["v*"]

[tool.versioningit.next-version]
method = "smallest-release"

[tool.versioningit.format]
# The format used by versioneer
# Ref: https://versioningit.readthedocs.io/en/stable/index.html#example-configurations
distance = "{next_version}.dev{distance}"
dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"

[tool.versioningit.onbuild]
method = "replace-version"
require-match = true
replacement = """dict(
    version="{version}",
    version_tuple={version_tuple},
    build_date="{build_date:%Y.%m.%d}",
    branch="{branch}",
    distance="{distance}",
    head_commit_hash="{revision}",
    vcs_name="{vcs_name}"
)"""
source-file = "template_package/__init__.py"
build-file = "template_package/__init__.py"


# ----------------------------------------- Pylint -----------------------------------------
[tool.pylint.main]
# fail-on =
fail-under = 10
ignore = ["CVS"]
jobs = 0
limit-inference-results = 500
load-plugins = [
    "pylint.extensions.broad_try_clause",
    "pylint.extensions.code_style",
    "pylint.extensions.emptystring",
    "pylint.extensions.comparetozero",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.for_any_all",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.mccabe",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.docstyle",
    "pylint.extensions.dunder",
    "pylint.extensions.check_elif",
    "pylint.extensions.empty_comment",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.private_import",
    "pylint.extensions.magic_value",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.docparams",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
    "pylint.extensions.while_used",
]
py-version = "3.9"

[tool.pylint.basic]
good-names = ["i", "j", "k", "x", "y", "z", "ex", "Run", "_"]

[tool.pylint.design]
max-args = 10
max-attributes = 20
max-bool-expr = 5
max-public-methods = 50
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.format]
max-line-length = 100
max-module-lines = 1000

[tool.pylint.imports]
ext-import-graph = "pylint_import_graph_external.gv"
import-graph = "pylint_import_graph_all.gv"
int-import-graph = "pylint_import_graph_internal.gv"

[tool.pylint.logging]
logging-format-style = "new"

[tool.pylint."messages control"]
disable = []

[tool.pylint.reports]
reports = true
score = true
msg-template = "{path} --- {obj} --- {line}:{end_line} - {column}:{end_column}\n\t{msg_id} ({category}, {symbol}): {msg}"
output-format = [
    "json:pylint_report.json",
    "text:pylint_report.txt",
    "parseable:pylint_report_parseable.txt",
    "msvs:pylint_report_msvs.txt",
    "colorized",
]

[tool.pylint.spelling]
# Spelling dictionary name. Available dictionaries: en (aspell), en_AU (aspell),
# en_CA (aspell), en_GB (aspell), en_US (aspell).
# spelling-dict =


# ----------------------------------------- isort ------------------------------------------------
# Ref: https://pycqa.github.io/isort/docs/configuration/options.html
[tool.isort]
profile = "black"
src_paths = ["template_package"]
line_length = 100
use_parentheses = true
lines_before_imports = 2
lines_after_imports = 2
lines_between_sections = 0
include_trailing_comma = true
split_on_trailing_comma = true
verbose = true
color_output = true
only_modified = true
[tool.isort.import_headings]
STDLIB = 'Standard libraries'
THIRDPARTY = 'Non-standard libraries'
FIRSTPARTY = 'Self'


# ----------------------------------------- black ------------------------------------------------
# Ref: https://black.readthedocs.io/en/stable/usage_and_configuration/index.html
[tool.black]
line-length = 100


# ----------------------------------------- Project Metadata -------------------------------------
[project]
dynamic = ["version"]
name = "template-package"
readme = {file = "README.md", content-type = "text/markdown"}
